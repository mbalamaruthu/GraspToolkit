/*
* generated by Xtext
*/
package uk.ac.standrews.graspide.grasp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GraspDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraspSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraspSpecification");
		private final Assignment cArchitectureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArchitectureArchitectureParserRuleCall_0 = (RuleCall)cArchitectureAssignment.eContents().get(0);
		
		//GraspSpecification:
		//	architecture=Architecture;
		public ParserRule getRule() { return rule; }

		//architecture=Architecture
		public Assignment getArchitectureAssignment() { return cArchitectureAssignment; }

		//Architecture
		public RuleCall getArchitectureArchitectureParserRuleCall_0() { return cArchitectureArchitectureParserRuleCall_0; }
	}

	public class ArchitectureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Architecture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cArchitectureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArchitecutrebodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArchitecutrebodyArchitectureBodyParserRuleCall_4_0 = (RuleCall)cArchitecutrebodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Architecture:
		//	annotation+=Annotation* "architecture" name=ID "{" architecutrebody=ArchitectureBody "}";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* "architecture" name=ID "{" architecutrebody=ArchitectureBody "}"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"architecture"
		public Keyword getArchitectureKeyword_1() { return cArchitectureKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//architecutrebody=ArchitectureBody
		public Assignment getArchitecutrebodyAssignment_4() { return cArchitecutrebodyAssignment_4; }

		//ArchitectureBody
		public RuleCall getArchitecutrebodyArchitectureBodyParserRuleCall_4_0() { return cArchitecutrebodyArchitectureBodyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ArchitectureBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchitectureBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Assignment cDeclarationStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationStartDeclarationStartParserRuleCall_1_0 = (RuleCall)cDeclarationStartAssignment_1.eContents().get(0);
		private final Assignment cSystemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemSystemParserRuleCall_2_0 = (RuleCall)cSystemAssignment_2.eContents().get(0);
		private final Assignment cDeclarationEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationEndDeclarationEndParserRuleCall_3_0 = (RuleCall)cDeclarationEndAssignment_3.eContents().get(0);
		
		//ArchitectureBody:
		//	annotation+=Annotation* declarationStart=DeclarationStart system=System declarationEnd=DeclarationEnd;
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* declarationStart=DeclarationStart system=System declarationEnd=DeclarationEnd
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//declarationStart=DeclarationStart
		public Assignment getDeclarationStartAssignment_1() { return cDeclarationStartAssignment_1; }

		//DeclarationStart
		public RuleCall getDeclarationStartDeclarationStartParserRuleCall_1_0() { return cDeclarationStartDeclarationStartParserRuleCall_1_0; }

		//system=System
		public Assignment getSystemAssignment_2() { return cSystemAssignment_2; }

		//System
		public RuleCall getSystemSystemParserRuleCall_2_0() { return cSystemSystemParserRuleCall_2_0; }

		//declarationEnd=DeclarationEnd
		public Assignment getDeclarationEndAssignment_3() { return cDeclarationEndAssignment_3; }

		//DeclarationEnd
		public RuleCall getDeclarationEndDeclarationEndParserRuleCall_3_0() { return cDeclarationEndDeclarationEndParserRuleCall_3_0; }
	}

	public class DeclarationStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationStartAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cAnnotationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationAssignment_1_1.eContents().get(0);
		
		//DeclarationStart:
		//	{DeclarationStart} (declaration+=Declaration annotation+=Annotation*)*;
		public ParserRule getRule() { return rule; }

		//{DeclarationStart} (declaration+=Declaration annotation+=Annotation*)*
		public Group getGroup() { return cGroup; }

		//{DeclarationStart}
		public Action getDeclarationStartAction_0() { return cDeclarationStartAction_0; }

		//(declaration+=Declaration annotation+=Annotation*)*
		public Group getGroup_1() { return cGroup_1; }

		//declaration+=Declaration
		public Assignment getDeclarationAssignment_1_0() { return cDeclarationAssignment_1_0; }

		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0_0() { return cDeclarationDeclarationParserRuleCall_1_0_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_1_1() { return cAnnotationAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_1_1_0() { return cAnnotationAnnotationParserRuleCall_1_1_0; }
	}

	public class DeclarationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_1_0 = (RuleCall)cDeclarationAssignment_1_1.eContents().get(0);
		
		//DeclarationEnd:
		//	{DeclarationEnd} (annotation+=Annotation* declaration+=Declaration)*;
		public ParserRule getRule() { return rule; }

		//{DeclarationEnd} (annotation+=Annotation* declaration+=Declaration)*
		public Group getGroup() { return cGroup; }

		//{DeclarationEnd}
		public Action getDeclarationEndAction_0() { return cDeclarationEndAction_0; }

		//(annotation+=Annotation* declaration+=Declaration)*
		public Group getGroup_1() { return cGroup_1; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_1_0() { return cAnnotationAssignment_1_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_1_0_0() { return cAnnotationAnnotationParserRuleCall_1_0_0; }

		//declaration+=Declaration
		public Assignment getDeclarationAssignment_1_1() { return cDeclarationAssignment_1_1; }

		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_1_0() { return cDeclarationDeclarationParserRuleCall_1_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementOrQualityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRationaleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTemplateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//	RequirementOrQuality | Rationale | Template;
		public ParserRule getRule() { return rule; }

		//RequirementOrQuality | Rationale | Template
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequirementOrQuality
		public RuleCall getRequirementOrQualityParserRuleCall_0() { return cRequirementOrQualityParserRuleCall_0; }

		//Rationale
		public RuleCall getRationaleParserRuleCall_1() { return cRationaleParserRuleCall_1; }

		//Template
		public RuleCall getTemplateParserRuleCall_2() { return cTemplateParserRuleCall_2; }
	}

	public class RequirementOrQualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementOrQuality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequirementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQattributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RequirementOrQuality:
		//	Requirement | Qattribute;
		public ParserRule getRule() { return rule; }

		//Requirement | Qattribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//Requirement
		public RuleCall getRequirementParserRuleCall_0() { return cRequirementParserRuleCall_0; }

		//Qattribute
		public RuleCall getQattributeParserRuleCall_1() { return cQattributeParserRuleCall_1; }
	}

	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStringLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStringLiteralSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cStringLiteralAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Requirement:
		//	"requirement" name=ID ("=" stringLiteral=STRING)? ";";
		public ParserRule getRule() { return rule; }

		//"requirement" name=ID ("=" stringLiteral=STRING)? ";"
		public Group getGroup() { return cGroup; }

		//"requirement"
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" stringLiteral=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//stringLiteral=STRING
		public Assignment getStringLiteralAssignment_2_1() { return cStringLiteralAssignment_2_1; }

		//STRING
		public RuleCall getStringLiteralSTRINGTerminalRuleCall_2_1_0() { return cStringLiteralSTRINGTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class QattributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Qattribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuality_attributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Assignment cSupportsClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSupportsClauseSupportsClauseParserRuleCall_3_0 = (RuleCall)cSupportsClauseAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Qattribute:
		//	"quality_attribute" name=ID ("=" expression=Expression)? supportsClause=SupportsClause? ";";
		public ParserRule getRule() { return rule; }

		//"quality_attribute" name=ID ("=" expression=Expression)? supportsClause=SupportsClause? ";"
		public Group getGroup() { return cGroup; }

		//"quality_attribute"
		public Keyword getQuality_attributeKeyword_0() { return cQuality_attributeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//supportsClause=SupportsClause?
		public Assignment getSupportsClauseAssignment_3() { return cSupportsClauseAssignment_3; }

		//SupportsClause
		public RuleCall getSupportsClauseSupportsClauseParserRuleCall_3_0() { return cSupportsClauseSupportsClauseParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RationaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rationale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRationaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterListParameterListParserRuleCall_3_0 = (RuleCall)cParameterListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperRationaleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSuperRationaleRationaleCrossReference_5_1_0 = (CrossReference)cSuperRationaleAssignment_5_1.eContents().get(0);
		private final RuleCall cSuperRationaleRationaleIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSuperRationaleRationaleCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReasonAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReasonReasonParserRuleCall_7_0 = (RuleCall)cReasonAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rationale:
		//	"rationale" name=ID "(" parameterList=ParameterList? ")" ("extends" superRationale=[Rationale])? "{" reason+=Reason*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"rationale" name=ID "(" parameterList=ParameterList? ")" ("extends" superRationale=[Rationale])? "{" reason+=Reason* "}"
		public Group getGroup() { return cGroup; }

		//"rationale"
		public Keyword getRationaleKeyword_0() { return cRationaleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_3() { return cParameterListAssignment_3; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_3_0() { return cParameterListParameterListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("extends" superRationale=[Rationale])?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//superRationale=[Rationale]
		public Assignment getSuperRationaleAssignment_5_1() { return cSuperRationaleAssignment_5_1; }

		//[Rationale]
		public CrossReference getSuperRationaleRationaleCrossReference_5_1_0() { return cSuperRationaleRationaleCrossReference_5_1_0; }

		//ID
		public RuleCall getSuperRationaleRationaleIDTerminalRuleCall_5_1_0_1() { return cSuperRationaleRationaleIDTerminalRuleCall_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//reason+=Reason*
		public Assignment getReasonAssignment_7() { return cReasonAssignment_7; }

		//Reason
		public RuleCall getReasonReasonParserRuleCall_7_0() { return cReasonReasonParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ReasonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reason");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReasonAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReasonAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cReasonAnnotationAssignment_0.eContents().get(0);
		private final Keyword cReasonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cSupportsClauseAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSupportsClauseSupportsClauseParserRuleCall_2_1_0 = (RuleCall)cSupportsClauseAssignment_2_1.eContents().get(0);
		private final Assignment cInhibitsClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInhibitsClauseInhibitsClauseParserRuleCall_3_0 = (RuleCall)cInhibitsClauseAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Reason:
		//	reasonAnnotation+=Annotation* "reason" (expression=Expression | supportsClause=SupportsClause)
		//	inhibitsClause=InhibitsClause? ";";
		public ParserRule getRule() { return rule; }

		//reasonAnnotation+=Annotation* "reason" (expression=Expression | supportsClause=SupportsClause)
		//inhibitsClause=InhibitsClause? ";"
		public Group getGroup() { return cGroup; }

		//reasonAnnotation+=Annotation*
		public Assignment getReasonAnnotationAssignment_0() { return cReasonAnnotationAssignment_0; }

		//Annotation
		public RuleCall getReasonAnnotationAnnotationParserRuleCall_0_0() { return cReasonAnnotationAnnotationParserRuleCall_0_0; }

		//"reason"
		public Keyword getReasonKeyword_1() { return cReasonKeyword_1; }

		//expression=Expression | supportsClause=SupportsClause
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }

		//supportsClause=SupportsClause
		public Assignment getSupportsClauseAssignment_2_1() { return cSupportsClauseAssignment_2_1; }

		//SupportsClause
		public RuleCall getSupportsClauseSupportsClauseParserRuleCall_2_1_0() { return cSupportsClauseSupportsClauseParserRuleCall_2_1_0; }

		//inhibitsClause=InhibitsClause?
		public Assignment getInhibitsClauseAssignment_3() { return cInhibitsClauseAssignment_3; }

		//InhibitsClause
		public RuleCall getInhibitsClauseInhibitsClauseParserRuleCall_3_0() { return cInhibitsClauseInhibitsClauseParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntegerLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntegerLiteralINTEGER_LITERALParserRuleCall_2_1_0 = (RuleCall)cIntegerLiteralAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterListParameterListParserRuleCall_4_0 = (RuleCall)cParameterListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSuperTemplateAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSuperTemplateTemplateCrossReference_6_1_0 = (CrossReference)cSuperTemplateAssignment_6_1.eContents().get(0);
		private final RuleCall cSuperTemplateTemplateIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSuperTemplateTemplateCrossReference_6_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cTemplateAnnotationAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cTemplateAnnotationAnnotationParserRuleCall_8_0_0 = (RuleCall)cTemplateAnnotationAssignment_8_0.eContents().get(0);
		private final Assignment cTemplateConstituentAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTemplateConstituentTemplateConstituentParserRuleCall_8_1_0 = (RuleCall)cTemplateConstituentAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Template:
		//	"template" name=ID (":" integerLiteral=INTEGER_LITERAL)? "(" parameterList=ParameterList? ")" ("extends"
		//	superTemplate=[Template])? "{" (templateAnnotation+=Annotation* templateConstituent+=TemplateConstituent)* "}";
		public ParserRule getRule() { return rule; }

		//"template" name=ID (":" integerLiteral=INTEGER_LITERAL)? "(" parameterList=ParameterList? ")" ("extends"
		//superTemplate=[Template])? "{" (templateAnnotation+=Annotation* templateConstituent+=TemplateConstituent)* "}"
		public Group getGroup() { return cGroup; }

		//"template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" integerLiteral=INTEGER_LITERAL)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//integerLiteral=INTEGER_LITERAL
		public Assignment getIntegerLiteralAssignment_2_1() { return cIntegerLiteralAssignment_2_1; }

		//INTEGER_LITERAL
		public RuleCall getIntegerLiteralINTEGER_LITERALParserRuleCall_2_1_0() { return cIntegerLiteralINTEGER_LITERALParserRuleCall_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameterList=ParameterList?
		public Assignment getParameterListAssignment_4() { return cParameterListAssignment_4; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_4_0() { return cParameterListParameterListParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("extends" superTemplate=[Template])?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//superTemplate=[Template]
		public Assignment getSuperTemplateAssignment_6_1() { return cSuperTemplateAssignment_6_1; }

		//[Template]
		public CrossReference getSuperTemplateTemplateCrossReference_6_1_0() { return cSuperTemplateTemplateCrossReference_6_1_0; }

		//ID
		public RuleCall getSuperTemplateTemplateIDTerminalRuleCall_6_1_0_1() { return cSuperTemplateTemplateIDTerminalRuleCall_6_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//(templateAnnotation+=Annotation* templateConstituent+=TemplateConstituent)*
		public Group getGroup_8() { return cGroup_8; }

		//templateAnnotation+=Annotation*
		public Assignment getTemplateAnnotationAssignment_8_0() { return cTemplateAnnotationAssignment_8_0; }

		//Annotation
		public RuleCall getTemplateAnnotationAnnotationParserRuleCall_8_0_0() { return cTemplateAnnotationAnnotationParserRuleCall_8_0_0; }

		//templateConstituent+=TemplateConstituent
		public Assignment getTemplateConstituentAssignment_8_1() { return cTemplateConstituentAssignment_8_1; }

		//TemplateConstituent
		public RuleCall getTemplateConstituentTemplateConstituentParserRuleCall_8_1_0() { return cTemplateConstituentTemplateConstituentParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TemplateConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateConstituent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemplateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProvidesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequiresParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TemplateConstituent:
		//	Template | Provides | Requires | Property | Check;
		public ParserRule getRule() { return rule; }

		//Template | Provides | Requires | Property | Check
		public Alternatives getAlternatives() { return cAlternatives; }

		//Template
		public RuleCall getTemplateParserRuleCall_0() { return cTemplateParserRuleCall_0; }

		//Provides
		public RuleCall getProvidesParserRuleCall_1() { return cProvidesParserRuleCall_1; }

		//Requires
		public RuleCall getRequiresParserRuleCall_2() { return cRequiresParserRuleCall_2; }

		//Property
		public RuleCall getPropertyParserRuleCall_3() { return cPropertyParserRuleCall_3; }

		//Check
		public RuleCall getCheckParserRuleCall_4() { return cCheckParserRuleCall_4; }
	}

	public class ProvidesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Provides");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTEGER_LITERALParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cBecauseClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_4_0 = (RuleCall)cBecauseClauseAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cProvidesConstituentAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cProvidesConstituentProvidesConstituentParserRuleCall_5_0_1_0 = (RuleCall)cProvidesConstituentAssignment_5_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Provides:
		//	"provides" name=ID (":" value=INTEGER_LITERAL)? type=ID? becauseClause=BecauseClause? ("{"
		//	providesConstituent+=ProvidesConstituent* "}" | ";");
		public ParserRule getRule() { return rule; }

		//"provides" name=ID (":" value=INTEGER_LITERAL)? type=ID? becauseClause=BecauseClause? ("{"
		//providesConstituent+=ProvidesConstituent* "}" | ";")
		public Group getGroup() { return cGroup; }

		//"provides"
		public Keyword getProvidesKeyword_0() { return cProvidesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" value=INTEGER_LITERAL)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//value=INTEGER_LITERAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INTEGER_LITERAL
		public RuleCall getValueINTEGER_LITERALParserRuleCall_2_1_0() { return cValueINTEGER_LITERALParserRuleCall_2_1_0; }

		//type=ID?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_4() { return cBecauseClauseAssignment_4; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_4_0() { return cBecauseClauseBecauseClauseParserRuleCall_4_0; }

		//"{" providesConstituent+=ProvidesConstituent* "}" | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" providesConstituent+=ProvidesConstituent* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//providesConstituent+=ProvidesConstituent*
		public Assignment getProvidesConstituentAssignment_5_0_1() { return cProvidesConstituentAssignment_5_0_1; }

		//ProvidesConstituent
		public RuleCall getProvidesConstituentProvidesConstituentParserRuleCall_5_0_1_0() { return cProvidesConstituentProvidesConstituentParserRuleCall_5_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class ProvidesConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidesConstituent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProvidesAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProvidesAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cProvidesAnnotationAssignment_0.eContents().get(0);
		private final Assignment cCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckCheckParserRuleCall_1_0 = (RuleCall)cCheckAssignment_1.eContents().get(0);
		
		//ProvidesConstituent:
		//	providesAnnotation+=Annotation* check=Check;
		public ParserRule getRule() { return rule; }

		//providesAnnotation+=Annotation* check=Check
		public Group getGroup() { return cGroup; }

		//providesAnnotation+=Annotation*
		public Assignment getProvidesAnnotationAssignment_0() { return cProvidesAnnotationAssignment_0; }

		//Annotation
		public RuleCall getProvidesAnnotationAnnotationParserRuleCall_0_0() { return cProvidesAnnotationAnnotationParserRuleCall_0_0; }

		//check=Check
		public Assignment getCheckAssignment_1() { return cCheckAssignment_1; }

		//Check
		public RuleCall getCheckCheckParserRuleCall_1_0() { return cCheckCheckParserRuleCall_1_0; }
	}

	public class RequiresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requires");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cBecauseRequiresClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBecauseRequiresClauseBecauseClauseParserRuleCall_3_0 = (RuleCall)cBecauseRequiresClauseAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cRequiresConstituentAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cRequiresConstituentRequiresConstituentParserRuleCall_4_0_1_0 = (RuleCall)cRequiresConstituentAssignment_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//Requires:
		//	"requires" type=ID value=ID? becauseRequiresClause=BecauseClause? ("{" requiresConstituent+=RequiresConstituent* "}"
		//	| ";");
		public ParserRule getRule() { return rule; }

		//"requires" type=ID value=ID? becauseRequiresClause=BecauseClause? ("{" requiresConstituent+=RequiresConstituent* "}" |
		//";")
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//value=ID?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }

		//becauseRequiresClause=BecauseClause?
		public Assignment getBecauseRequiresClauseAssignment_3() { return cBecauseRequiresClauseAssignment_3; }

		//BecauseClause
		public RuleCall getBecauseRequiresClauseBecauseClauseParserRuleCall_3_0() { return cBecauseRequiresClauseBecauseClauseParserRuleCall_3_0; }

		//"{" requiresConstituent+=RequiresConstituent* "}" | ";"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"{" requiresConstituent+=RequiresConstituent* "}"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_0() { return cLeftCurlyBracketKeyword_4_0_0; }

		//requiresConstituent+=RequiresConstituent*
		public Assignment getRequiresConstituentAssignment_4_0_1() { return cRequiresConstituentAssignment_4_0_1; }

		//RequiresConstituent
		public RuleCall getRequiresConstituentRequiresConstituentParserRuleCall_4_0_1_0() { return cRequiresConstituentRequiresConstituentParserRuleCall_4_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class RequiresConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiresConstituent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiresAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiresAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cRequiresAnnotationAssignment_0.eContents().get(0);
		private final Assignment cCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckCheckParserRuleCall_1_0 = (RuleCall)cCheckAssignment_1.eContents().get(0);
		
		//RequiresConstituent:
		//	requiresAnnotation+=Annotation* check=Check;
		public ParserRule getRule() { return rule; }

		//requiresAnnotation+=Annotation* check=Check
		public Group getGroup() { return cGroup; }

		//requiresAnnotation+=Annotation*
		public Assignment getRequiresAnnotationAssignment_0() { return cRequiresAnnotationAssignment_0; }

		//Annotation
		public RuleCall getRequiresAnnotationAnnotationParserRuleCall_0_0() { return cRequiresAnnotationAnnotationParserRuleCall_0_0; }

		//check=Check
		public Assignment getCheckAssignment_1() { return cCheckAssignment_1; }

		//Check
		public RuleCall getCheckCheckParserRuleCall_1_0() { return cCheckCheckParserRuleCall_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Assignment cBecauseClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_3_0 = (RuleCall)cBecauseClauseAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Property:
		//	"property" name=ID ("=" expression=Expression)? becauseClause=BecauseClause? ";";
		public ParserRule getRule() { return rule; }

		//"property" name=ID ("=" expression=Expression)? becauseClause=BecauseClause? ";"
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_3() { return cBecauseClauseAssignment_3; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_3_0() { return cBecauseClauseBecauseClauseParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBecauseClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_2_0 = (RuleCall)cBecauseClauseAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Check:
		//	"check" expression=Expression becauseClause=BecauseClause? ";";
		public ParserRule getRule() { return rule; }

		//"check" expression=Expression becauseClause=BecauseClause? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_2() { return cBecauseClauseAssignment_2; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_2_0() { return cBecauseClauseBecauseClauseParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBecauseClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_2_0 = (RuleCall)cBecauseClauseAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSystemAnnotationAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSystemAnnotationAnnotationParserRuleCall_4_0_0 = (RuleCall)cSystemAnnotationAssignment_4_0.eContents().get(0);
		private final Assignment cSystemConstituentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSystemConstituentSystemConstituentParserRuleCall_4_1_0 = (RuleCall)cSystemConstituentAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//System:
		//	"system" name=ID becauseClause=BecauseClause? "{" (systemAnnotation+=Annotation*
		//	systemConstituent+=SystemConstituent)* "}";
		public ParserRule getRule() { return rule; }

		//"system" name=ID becauseClause=BecauseClause? "{" (systemAnnotation+=Annotation* systemConstituent+=SystemConstituent)*
		//"}"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_2() { return cBecauseClauseAssignment_2; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_2_0() { return cBecauseClauseBecauseClauseParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(systemAnnotation+=Annotation* systemConstituent+=SystemConstituent)*
		public Group getGroup_4() { return cGroup_4; }

		//systemAnnotation+=Annotation*
		public Assignment getSystemAnnotationAssignment_4_0() { return cSystemAnnotationAssignment_4_0; }

		//Annotation
		public RuleCall getSystemAnnotationAnnotationParserRuleCall_4_0_0() { return cSystemAnnotationAnnotationParserRuleCall_4_0_0; }

		//systemConstituent+=SystemConstituent
		public Assignment getSystemConstituentAssignment_4_1() { return cSystemConstituentAssignment_4_1; }

		//SystemConstituent
		public RuleCall getSystemConstituentSystemConstituentParserRuleCall_4_1_0() { return cSystemConstituentSystemConstituentParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SystemConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemConstituent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SystemConstituent:
		//	Compositional | Check;
		public ParserRule getRule() { return rule; }

		//Compositional | Check
		public Alternatives getAlternatives() { return cAlternatives; }

		//Compositional
		public RuleCall getCompositionalParserRuleCall_0() { return cCompositionalParserRuleCall_0; }

		//Check
		public RuleCall getCheckParserRuleCall_1() { return cCheckParserRuleCall_1; }
	}

	public class CompositionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compositional");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Compositional:
		//	Layer | Component | Connector | Link;
		public ParserRule getRule() { return rule; }

		//Layer | Component | Connector | Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//Layer
		public RuleCall getLayerParserRuleCall_0() { return cLayerParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }

		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }

		//Link
		public RuleCall getLinkParserRuleCall_3() { return cLinkParserRuleCall_3; }
	}

	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOverKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperLayerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperLayerLayerCrossReference_2_1_0 = (CrossReference)cSuperLayerAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperLayerLayerIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperLayerLayerCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperLayerAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperLayerLayerCrossReference_2_2_1_0 = (CrossReference)cSuperLayerAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperLayerLayerIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cSuperLayerLayerCrossReference_2_2_1_0.eContents().get(1);
		private final Assignment cBecauseClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_3_0 = (RuleCall)cBecauseClauseAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLayerAnnotationAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLayerAnnotationAnnotationParserRuleCall_5_0_0 = (RuleCall)cLayerAnnotationAssignment_5_0.eContents().get(0);
		private final Assignment cLayerConstituentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLayerConstituentLayerConstituentParserRuleCall_5_1_0 = (RuleCall)cLayerConstituentAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Layer:
		//	"layer" name=ID ("over" superLayer+=[Layer] ("," superLayer+=[Layer])*)? becauseClause=BecauseClause? "{"
		//	(layerAnnotation+=Annotation* layerConstituent+=LayerConstituent)* "}";
		public ParserRule getRule() { return rule; }

		//"layer" name=ID ("over" superLayer+=[Layer] ("," superLayer+=[Layer])*)? becauseClause=BecauseClause? "{"
		//(layerAnnotation+=Annotation* layerConstituent+=LayerConstituent)* "}"
		public Group getGroup() { return cGroup; }

		//"layer"
		public Keyword getLayerKeyword_0() { return cLayerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("over" superLayer+=[Layer] ("," superLayer+=[Layer])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"over"
		public Keyword getOverKeyword_2_0() { return cOverKeyword_2_0; }

		//superLayer+=[Layer]
		public Assignment getSuperLayerAssignment_2_1() { return cSuperLayerAssignment_2_1; }

		//[Layer]
		public CrossReference getSuperLayerLayerCrossReference_2_1_0() { return cSuperLayerLayerCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperLayerLayerIDTerminalRuleCall_2_1_0_1() { return cSuperLayerLayerIDTerminalRuleCall_2_1_0_1; }

		//("," superLayer+=[Layer])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superLayer+=[Layer]
		public Assignment getSuperLayerAssignment_2_2_1() { return cSuperLayerAssignment_2_2_1; }

		//[Layer]
		public CrossReference getSuperLayerLayerCrossReference_2_2_1_0() { return cSuperLayerLayerCrossReference_2_2_1_0; }

		//ID
		public RuleCall getSuperLayerLayerIDTerminalRuleCall_2_2_1_0_1() { return cSuperLayerLayerIDTerminalRuleCall_2_2_1_0_1; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_3() { return cBecauseClauseAssignment_3; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_3_0() { return cBecauseClauseBecauseClauseParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(layerAnnotation+=Annotation* layerConstituent+=LayerConstituent)*
		public Group getGroup_5() { return cGroup_5; }

		//layerAnnotation+=Annotation*
		public Assignment getLayerAnnotationAssignment_5_0() { return cLayerAnnotationAssignment_5_0; }

		//Annotation
		public RuleCall getLayerAnnotationAnnotationParserRuleCall_5_0_0() { return cLayerAnnotationAnnotationParserRuleCall_5_0_0; }

		//layerConstituent+=LayerConstituent
		public Assignment getLayerConstituentAssignment_5_1() { return cLayerConstituentAssignment_5_1; }

		//LayerConstituent
		public RuleCall getLayerConstituentLayerConstituentParserRuleCall_5_1_0() { return cLayerConstituentLayerConstituentParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LayerConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LayerConstituent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LayerConstituent:
		//	Compositional | Check;
		public ParserRule getRule() { return rule; }

		//Compositional | Check
		public Alternatives getAlternatives() { return cAlternatives; }

		//Compositional
		public RuleCall getCompositionalParserRuleCall_0() { return cCompositionalParserRuleCall_0; }

		//Check
		public RuleCall getCheckParserRuleCall_1() { return cCheckParserRuleCall_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueTemplateCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueTemplateIDTerminalRuleCall_3_0_1 = (RuleCall)cValueTemplateCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArgumentListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentListArgumentListParserRuleCall_5_0 = (RuleCall)cArgumentListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBecauseClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_7_0 = (RuleCall)cBecauseClauseAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Group cGroup_8_0_1 = (Group)cGroup_8_0.eContents().get(1);
		private final Assignment cAnnotationAssignment_8_0_1_0 = (Assignment)cGroup_8_0_1.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_8_0_1_0_0 = (RuleCall)cAnnotationAssignment_8_0_1_0.eContents().get(0);
		private final Assignment cInstantiableConstituentAssignment_8_0_1_1 = (Assignment)cGroup_8_0_1.eContents().get(1);
		private final RuleCall cInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0 = (RuleCall)cInstantiableConstituentAssignment_8_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//Component:
		//	"component" name=ID "=" value=[Template] "(" argumentList=ArgumentList? ")" becauseClause=BecauseClause? ("{"
		//	(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";");
		public ParserRule getRule() { return rule; }

		//"component" name=ID "=" value=[Template] "(" argumentList=ArgumentList? ")" becauseClause=BecauseClause? ("{"
		//(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";")
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=[Template]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[Template]
		public CrossReference getValueTemplateCrossReference_3_0() { return cValueTemplateCrossReference_3_0; }

		//ID
		public RuleCall getValueTemplateIDTerminalRuleCall_3_0_1() { return cValueTemplateIDTerminalRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//argumentList=ArgumentList?
		public Assignment getArgumentListAssignment_5() { return cArgumentListAssignment_5; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_5_0() { return cArgumentListArgumentListParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_7() { return cBecauseClauseAssignment_7; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_7_0() { return cBecauseClauseBecauseClauseParserRuleCall_7_0; }

		//"{" (annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";"
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//"{" (annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}"
		public Group getGroup_8_0() { return cGroup_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }

		//(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)*
		public Group getGroup_8_0_1() { return cGroup_8_0_1; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_8_0_1_0() { return cAnnotationAssignment_8_0_1_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_8_0_1_0_0() { return cAnnotationAnnotationParserRuleCall_8_0_1_0_0; }

		//instantiableConstituent+=InstantiableConstituent
		public Assignment getInstantiableConstituentAssignment_8_0_1_1() { return cInstantiableConstituentAssignment_8_0_1_1; }

		//InstantiableConstituent
		public RuleCall getInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0() { return cInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }

		//";"
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}

	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueTemplateCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueTemplateIDTerminalRuleCall_3_0_1 = (RuleCall)cValueTemplateCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArgumentListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentListArgumentListParserRuleCall_5_0 = (RuleCall)cArgumentListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBecauseClauseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_7_0 = (RuleCall)cBecauseClauseAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Group cGroup_8_0_1 = (Group)cGroup_8_0.eContents().get(1);
		private final Assignment cAnnotationAssignment_8_0_1_0 = (Assignment)cGroup_8_0_1.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_8_0_1_0_0 = (RuleCall)cAnnotationAssignment_8_0_1_0.eContents().get(0);
		private final Assignment cInstantiableConstituentAssignment_8_0_1_1 = (Assignment)cGroup_8_0_1.eContents().get(1);
		private final RuleCall cInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0 = (RuleCall)cInstantiableConstituentAssignment_8_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//Connector:
		//	"connector" name=ID "=" value=[Template] "(" argumentList=ArgumentList? ")" becauseClause=BecauseClause? ("{"
		//	(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";");
		public ParserRule getRule() { return rule; }

		//"connector" name=ID "=" value=[Template] "(" argumentList=ArgumentList? ")" becauseClause=BecauseClause? ("{"
		//(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";")
		public Group getGroup() { return cGroup; }

		//"connector"
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=[Template]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[Template]
		public CrossReference getValueTemplateCrossReference_3_0() { return cValueTemplateCrossReference_3_0; }

		//ID
		public RuleCall getValueTemplateIDTerminalRuleCall_3_0_1() { return cValueTemplateIDTerminalRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//argumentList=ArgumentList?
		public Assignment getArgumentListAssignment_5() { return cArgumentListAssignment_5; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_5_0() { return cArgumentListArgumentListParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_7() { return cBecauseClauseAssignment_7; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_7_0() { return cBecauseClauseBecauseClauseParserRuleCall_7_0; }

		//"{" (annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";"
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//"{" (annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}"
		public Group getGroup_8_0() { return cGroup_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }

		//(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)*
		public Group getGroup_8_0_1() { return cGroup_8_0_1; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_8_0_1_0() { return cAnnotationAssignment_8_0_1_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_8_0_1_0_0() { return cAnnotationAnnotationParserRuleCall_8_0_1_0_0; }

		//instantiableConstituent+=InstantiableConstituent
		public Assignment getInstantiableConstituentAssignment_8_0_1_1() { return cInstantiableConstituentAssignment_8_0_1_1; }

		//InstantiableConstituent
		public RuleCall getInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0() { return cInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }

		//";"
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}

	public class InstantiableConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstantiableConstituent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InstantiableConstituent:
		//	Compositional | Check;
		public ParserRule getRule() { return rule; }

		//Compositional | Check
		public Alternatives getAlternatives() { return cAlternatives; }

		//Compositional
		public RuleCall getCompositionalParserRuleCall_0() { return cCompositionalParserRuleCall_0; }

		//Check
		public RuleCall getCheckParserRuleCall_1() { return cCheckParserRuleCall_1; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cLinkConsumerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinkConsumerLinkConsumerExpressionParserRuleCall_2_0 = (RuleCall)cLinkConsumerAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinkProvidersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinkProvidersLinkProvidersListParserRuleCall_4_0 = (RuleCall)cLinkProvidersAssignment_4.eContents().get(0);
		private final Assignment cBecauseClauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBecauseClauseBecauseClauseParserRuleCall_5_0 = (RuleCall)cBecauseClauseAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cLinkConstituentAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cLinkConstituentLinkConstituentParserRuleCall_6_0_1_0 = (RuleCall)cLinkConstituentAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//Link:
		//	"link" type=ID? linkConsumer=LinkConsumerExpression "to" linkProviders=LinkProvidersList becauseClause=BecauseClause?
		//	("{" linkConstituent+=LinkConstituent* "}" | ";");
		public ParserRule getRule() { return rule; }

		//"link" type=ID? linkConsumer=LinkConsumerExpression "to" linkProviders=LinkProvidersList becauseClause=BecauseClause?
		//("{" linkConstituent+=LinkConstituent* "}" | ";")
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//type=ID?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//linkConsumer=LinkConsumerExpression
		public Assignment getLinkConsumerAssignment_2() { return cLinkConsumerAssignment_2; }

		//LinkConsumerExpression
		public RuleCall getLinkConsumerLinkConsumerExpressionParserRuleCall_2_0() { return cLinkConsumerLinkConsumerExpressionParserRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//linkProviders=LinkProvidersList
		public Assignment getLinkProvidersAssignment_4() { return cLinkProvidersAssignment_4; }

		//LinkProvidersList
		public RuleCall getLinkProvidersLinkProvidersListParserRuleCall_4_0() { return cLinkProvidersLinkProvidersListParserRuleCall_4_0; }

		//becauseClause=BecauseClause?
		public Assignment getBecauseClauseAssignment_5() { return cBecauseClauseAssignment_5; }

		//BecauseClause
		public RuleCall getBecauseClauseBecauseClauseParserRuleCall_5_0() { return cBecauseClauseBecauseClauseParserRuleCall_5_0; }

		//"{" linkConstituent+=LinkConstituent* "}" | ";"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"{" linkConstituent+=LinkConstituent* "}"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0_0() { return cLeftCurlyBracketKeyword_6_0_0; }

		//linkConstituent+=LinkConstituent*
		public Assignment getLinkConstituentAssignment_6_0_1() { return cLinkConstituentAssignment_6_0_1; }

		//LinkConstituent
		public RuleCall getLinkConstituentLinkConstituentParserRuleCall_6_0_1_0() { return cLinkConstituentLinkConstituentParserRuleCall_6_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_0_2() { return cRightCurlyBracketKeyword_6_0_2; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}

	public class LinkConstituentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkConstituent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Assignment cCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckCheckParserRuleCall_1_0 = (RuleCall)cCheckAssignment_1.eContents().get(0);
		
		//LinkConstituent:
		//	annotation+=Annotation* check=Check;
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* check=Check
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//check=Check
		public Assignment getCheckAssignment_1() { return cCheckAssignment_1; }

		//Check
		public RuleCall getCheckCheckParserRuleCall_1_0() { return cCheckCheckParserRuleCall_1_0; }
	}

	public class LinkConsumerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkConsumerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConsumerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConsumerLinkConsumerPartCrossReference_0_0 = (CrossReference)cConsumerAssignment_0.eContents().get(0);
		private final RuleCall cConsumerLinkConsumerPartIDTerminalRuleCall_0_0_1 = (RuleCall)cConsumerLinkConsumerPartCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightConsumerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cRightConsumerAlternatives_1_1_0 = (Alternatives)cRightConsumerAssignment_1_1.eContents().get(0);
		private final RuleCall cRightConsumerIDTerminalRuleCall_1_1_0_0 = (RuleCall)cRightConsumerAlternatives_1_1_0.eContents().get(0);
		private final Keyword cRightConsumerOutKeyword_1_1_0_1 = (Keyword)cRightConsumerAlternatives_1_1_0.eContents().get(1);
		
		//LinkConsumerExpression:
		//	consumer=[LinkConsumerPart] ("." rightConsumer+=(ID | "out"))*;
		public ParserRule getRule() { return rule; }

		//consumer=[LinkConsumerPart] ("." rightConsumer+=(ID | "out"))*
		public Group getGroup() { return cGroup; }

		//consumer=[LinkConsumerPart]
		public Assignment getConsumerAssignment_0() { return cConsumerAssignment_0; }

		//[LinkConsumerPart]
		public CrossReference getConsumerLinkConsumerPartCrossReference_0_0() { return cConsumerLinkConsumerPartCrossReference_0_0; }

		//ID
		public RuleCall getConsumerLinkConsumerPartIDTerminalRuleCall_0_0_1() { return cConsumerLinkConsumerPartIDTerminalRuleCall_0_0_1; }

		//("." rightConsumer+=(ID | "out"))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//rightConsumer+=(ID | "out")
		public Assignment getRightConsumerAssignment_1_1() { return cRightConsumerAssignment_1_1; }

		//ID | "out"
		public Alternatives getRightConsumerAlternatives_1_1_0() { return cRightConsumerAlternatives_1_1_0; }

		//ID
		public RuleCall getRightConsumerIDTerminalRuleCall_1_1_0_0() { return cRightConsumerIDTerminalRuleCall_1_1_0_0; }

		//"out"
		public Keyword getRightConsumerOutKeyword_1_1_0_1() { return cRightConsumerOutKeyword_1_1_0_1; }
	}

	public class LinkConsumerPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkConsumerPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRequiresParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LinkConsumerPart:
		//	Layer | Component | Connector | Requires;
		public ParserRule getRule() { return rule; }

		//Layer | Component | Connector | Requires
		public Alternatives getAlternatives() { return cAlternatives; }

		//Layer
		public RuleCall getLayerParserRuleCall_0() { return cLayerParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }

		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }

		//Requires
		public RuleCall getRequiresParserRuleCall_3() { return cRequiresParserRuleCall_3; }
	}

	public class LinkProvidersListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkProvidersList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProvidersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProvidersLinkProvidersParserRuleCall_0_0 = (RuleCall)cProvidersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cProvidersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cProvidersLinkProvidersParserRuleCall_1_1_0 = (RuleCall)cProvidersAssignment_1_1.eContents().get(0);
		
		//LinkProvidersList:
		//	providers+=LinkProviders ("," providers+=LinkProviders)*;
		public ParserRule getRule() { return rule; }

		//providers+=LinkProviders ("," providers+=LinkProviders)*
		public Group getGroup() { return cGroup; }

		//providers+=LinkProviders
		public Assignment getProvidersAssignment_0() { return cProvidersAssignment_0; }

		//LinkProviders
		public RuleCall getProvidersLinkProvidersParserRuleCall_0_0() { return cProvidersLinkProvidersParserRuleCall_0_0; }

		//("," providers+=LinkProviders)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//providers+=LinkProviders
		public Assignment getProvidersAssignment_1_1() { return cProvidersAssignment_1_1; }

		//LinkProviders
		public RuleCall getProvidersLinkProvidersParserRuleCall_1_1_0() { return cProvidersLinkProvidersParserRuleCall_1_1_0; }
	}

	public class LinkProvidersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkProviders");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProviderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProviderLinkProviderPartCrossReference_0_0 = (CrossReference)cProviderAssignment_0.eContents().get(0);
		private final RuleCall cProviderLinkProviderPartIDTerminalRuleCall_0_0_1 = (RuleCall)cProviderLinkProviderPartCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightProviderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cRightProviderAlternatives_1_1_0 = (Alternatives)cRightProviderAssignment_1_1.eContents().get(0);
		private final RuleCall cRightProviderIDTerminalRuleCall_1_1_0_0 = (RuleCall)cRightProviderAlternatives_1_1_0.eContents().get(0);
		private final Keyword cRightProviderInKeyword_1_1_0_1 = (Keyword)cRightProviderAlternatives_1_1_0.eContents().get(1);
		
		//LinkProviders:
		//	provider=[LinkProviderPart] ("." rightProvider+=(ID | "in"))*;
		public ParserRule getRule() { return rule; }

		//provider=[LinkProviderPart] ("." rightProvider+=(ID | "in"))*
		public Group getGroup() { return cGroup; }

		//provider=[LinkProviderPart]
		public Assignment getProviderAssignment_0() { return cProviderAssignment_0; }

		//[LinkProviderPart]
		public CrossReference getProviderLinkProviderPartCrossReference_0_0() { return cProviderLinkProviderPartCrossReference_0_0; }

		//ID
		public RuleCall getProviderLinkProviderPartIDTerminalRuleCall_0_0_1() { return cProviderLinkProviderPartIDTerminalRuleCall_0_0_1; }

		//("." rightProvider+=(ID | "in"))*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//rightProvider+=(ID | "in")
		public Assignment getRightProviderAssignment_1_1() { return cRightProviderAssignment_1_1; }

		//ID | "in"
		public Alternatives getRightProviderAlternatives_1_1_0() { return cRightProviderAlternatives_1_1_0; }

		//ID
		public RuleCall getRightProviderIDTerminalRuleCall_1_1_0_0() { return cRightProviderIDTerminalRuleCall_1_1_0_0; }

		//"in"
		public Keyword getRightProviderInKeyword_1_1_0_1() { return cRightProviderInKeyword_1_1_0_1; }
	}

	public class LinkProviderPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkProviderPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProvidesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LinkProviderPart:
		//	Layer | Component | Connector | Provides;
		public ParserRule getRule() { return rule; }

		//Layer | Component | Connector | Provides
		public Alternatives getAlternatives() { return cAlternatives; }

		//Layer
		public RuleCall getLayerParserRuleCall_0() { return cLayerParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }

		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }

		//Provides
		public RuleCall getProvidesParserRuleCall_3() { return cProvidesParserRuleCall_3; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnnotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationIDTerminalRuleCall_1_0 = (RuleCall)cAnnotationAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueNameValuesParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Annotation:
		//	"@" annotation=ID? "(" value=NameValues ")";
		public ParserRule getRule() { return rule; }

		//"@" annotation=ID? "(" value=NameValues ")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//annotation=ID?
		public Assignment getAnnotationAssignment_1() { return cAnnotationAssignment_1; }

		//ID
		public RuleCall getAnnotationIDTerminalRuleCall_1_0() { return cAnnotationIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//value=NameValues
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//NameValues
		public RuleCall getValueNameValuesParserRuleCall_3_0() { return cValueNameValuesParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NameValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamePairAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePairIDTerminalRuleCall_0_0 = (RuleCall)cNamePairAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuePairAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePairExpressionParserRuleCall_2_0 = (RuleCall)cValuePairAssignment_2.eContents().get(0);
		
		//NameValue:
		//	namePair=ID "=" valuePair=Expression;
		public ParserRule getRule() { return rule; }

		//namePair=ID "=" valuePair=Expression
		public Group getGroup() { return cGroup; }

		//namePair=ID
		public Assignment getNamePairAssignment_0() { return cNamePairAssignment_0; }

		//ID
		public RuleCall getNamePairIDTerminalRuleCall_0_0() { return cNamePairIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valuePair=Expression
		public Assignment getValuePairAssignment_2() { return cValuePairAssignment_2; }

		//Expression
		public RuleCall getValuePairExpressionParserRuleCall_2_0() { return cValuePairExpressionParserRuleCall_2_0; }
	}

	public class NameValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMembersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMembersNameValueParserRuleCall_0_0 = (RuleCall)cMembersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMembersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMembersNameValueParserRuleCall_1_1_0 = (RuleCall)cMembersAssignment_1_1.eContents().get(0);
		
		//NameValues:
		//	members+=NameValue ("," members+=NameValue)*;
		public ParserRule getRule() { return rule; }

		//members+=NameValue ("," members+=NameValue)*
		public Group getGroup() { return cGroup; }

		//members+=NameValue
		public Assignment getMembersAssignment_0() { return cMembersAssignment_0; }

		//NameValue
		public RuleCall getMembersNameValueParserRuleCall_0_0() { return cMembersNameValueParserRuleCall_0_0; }

		//("," members+=NameValue)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//members+=NameValue
		public Assignment getMembersAssignment_1_1() { return cMembersAssignment_1_1; }

		//NameValue
		public RuleCall getMembersNameValueParserRuleCall_1_1_0() { return cMembersNameValueParserRuleCall_1_1_0; }
	}

	public class SupportsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SupportsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueRequirementOrQualityCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueRequirementOrQualityIDTerminalRuleCall_1_0_1 = (RuleCall)cValueRequirementOrQualityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cValueRequirementOrQualityCrossReference_2_1_0 = (CrossReference)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cValueRequirementOrQualityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cValueRequirementOrQualityCrossReference_2_1_0.eContents().get(1);
		
		//SupportsClause:
		//	"supports" value+=[RequirementOrQuality] ("," value+=[RequirementOrQuality])*;
		public ParserRule getRule() { return rule; }

		//"supports" value+=[RequirementOrQuality] ("," value+=[RequirementOrQuality])*
		public Group getGroup() { return cGroup; }

		//"supports"
		public Keyword getSupportsKeyword_0() { return cSupportsKeyword_0; }

		//value+=[RequirementOrQuality]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[RequirementOrQuality]
		public CrossReference getValueRequirementOrQualityCrossReference_1_0() { return cValueRequirementOrQualityCrossReference_1_0; }

		//ID
		public RuleCall getValueRequirementOrQualityIDTerminalRuleCall_1_0_1() { return cValueRequirementOrQualityIDTerminalRuleCall_1_0_1; }

		//("," value+=[RequirementOrQuality])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//value+=[RequirementOrQuality]
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//[RequirementOrQuality]
		public CrossReference getValueRequirementOrQualityCrossReference_2_1_0() { return cValueRequirementOrQualityCrossReference_2_1_0; }

		//ID
		public RuleCall getValueRequirementOrQualityIDTerminalRuleCall_2_1_0_1() { return cValueRequirementOrQualityIDTerminalRuleCall_2_1_0_1; }
	}

	public class InhibitsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InhibitsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInhibitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueRequirementOrQualityCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueRequirementOrQualityIDTerminalRuleCall_1_0_1 = (RuleCall)cValueRequirementOrQualityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cValueRequirementOrQualityCrossReference_2_1_0 = (CrossReference)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cValueRequirementOrQualityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cValueRequirementOrQualityCrossReference_2_1_0.eContents().get(1);
		
		//InhibitsClause:
		//	"inhibits" value+=[RequirementOrQuality] ("," value+=[RequirementOrQuality])*;
		public ParserRule getRule() { return rule; }

		//"inhibits" value+=[RequirementOrQuality] ("," value+=[RequirementOrQuality])*
		public Group getGroup() { return cGroup; }

		//"inhibits"
		public Keyword getInhibitsKeyword_0() { return cInhibitsKeyword_0; }

		//value+=[RequirementOrQuality]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[RequirementOrQuality]
		public CrossReference getValueRequirementOrQualityCrossReference_1_0() { return cValueRequirementOrQualityCrossReference_1_0; }

		//ID
		public RuleCall getValueRequirementOrQualityIDTerminalRuleCall_1_0_1() { return cValueRequirementOrQualityIDTerminalRuleCall_1_0_1; }

		//("," value+=[RequirementOrQuality])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//value+=[RequirementOrQuality]
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//[RequirementOrQuality]
		public CrossReference getValueRequirementOrQualityCrossReference_2_1_0() { return cValueRequirementOrQualityCrossReference_2_1_0; }

		//ID
		public RuleCall getValueRequirementOrQualityIDTerminalRuleCall_2_1_0_1() { return cValueRequirementOrQualityIDTerminalRuleCall_2_1_0_1; }
	}

	public class BecauseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BecauseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBecauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersBecauseCausalcontextParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersBecauseCausalcontextParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		
		//BecauseClause:
		//	"because" members+=BecauseCausalcontext ("," members+=BecauseCausalcontext)*;
		public ParserRule getRule() { return rule; }

		//"because" members+=BecauseCausalcontext ("," members+=BecauseCausalcontext)*
		public Group getGroup() { return cGroup; }

		//"because"
		public Keyword getBecauseKeyword_0() { return cBecauseKeyword_0; }

		//members+=BecauseCausalcontext
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//BecauseCausalcontext
		public RuleCall getMembersBecauseCausalcontextParserRuleCall_1_0() { return cMembersBecauseCausalcontextParserRuleCall_1_0; }

		//("," members+=BecauseCausalcontext)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=BecauseCausalcontext
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//BecauseCausalcontext
		public RuleCall getMembersBecauseCausalcontextParserRuleCall_2_1_0() { return cMembersBecauseCausalcontextParserRuleCall_2_1_0; }
	}

	public class BecauseCausalcontextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BecauseCausalcontext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueRationaleCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueRationaleIDTerminalRuleCall_0_0_1 = (RuleCall)cValueRationaleCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentListArgumentListParserRuleCall_2_0 = (RuleCall)cArgumentListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BecauseCausalcontext:
		//	value=[Rationale] "(" argumentList=ArgumentList? ")";
		public ParserRule getRule() { return rule; }

		//value=[Rationale] "(" argumentList=ArgumentList? ")"
		public Group getGroup() { return cGroup; }

		//value=[Rationale]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//[Rationale]
		public CrossReference getValueRationaleCrossReference_0_0() { return cValueRationaleCrossReference_0_0; }

		//ID
		public RuleCall getValueRationaleIDTerminalRuleCall_0_0_1() { return cValueRationaleIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//argumentList=ArgumentList?
		public Assignment getArgumentListAssignment_2() { return cArgumentListAssignment_2; }

		//ArgumentList
		public RuleCall getArgumentListArgumentListParserRuleCall_2_0() { return cArgumentListArgumentListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	names+=ID ("," names+=ID)*;
		public ParserRule getRule() { return rule; }

		//names+=ID ("," names+=ID)*
		public Group getGroup() { return cGroup; }

		//names+=ID
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0() { return cNamesIDTerminalRuleCall_0_0; }

		//("," names+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0() { return cNamesIDTerminalRuleCall_1_1_0; }
	}

	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMembersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMembersMemberExpressionParserRuleCall_0_0 = (RuleCall)cMembersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMembersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMembersMemberExpressionParserRuleCall_1_1_0 = (RuleCall)cMembersAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	members+=MemberExpression ("," members+=MemberExpression)*;
		public ParserRule getRule() { return rule; }

		//members+=MemberExpression ("," members+=MemberExpression)*
		public Group getGroup() { return cGroup; }

		//members+=MemberExpression
		public Assignment getMembersAssignment_0() { return cMembersAssignment_0; }

		//MemberExpression
		public RuleCall getMembersMemberExpressionParserRuleCall_0_0() { return cMembersMemberExpressionParserRuleCall_0_0; }

		//("," members+=MemberExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//members+=MemberExpression
		public Assignment getMembersAssignment_1_1() { return cMembersAssignment_1_1; }

		//MemberExpression
		public RuleCall getMembersMemberExpressionParserRuleCall_1_1_0() { return cMembersMemberExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cSubsetofExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	SubsetofExpression;
		public ParserRule getRule() { return rule; }

		//SubsetofExpression
		public RuleCall getSubsetofExpressionParserRuleCall() { return cSubsetofExpressionParserRuleCall; }
	}

	public class SubsetofExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsetofExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicalOrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicalOrLogicalOrExpressionParserRuleCall_0_0 = (RuleCall)cLogicalOrAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSubsetofKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLogicalOrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLogicalOrLogicalOrExpressionParserRuleCall_1_1_0 = (RuleCall)cLogicalOrAssignment_1_1.eContents().get(0);
		
		//SubsetofExpression:
		//	logicalOr+=LogicalOrExpression ("subsetof" logicalOr+=LogicalOrExpression)*;
		public ParserRule getRule() { return rule; }

		//logicalOr+=LogicalOrExpression ("subsetof" logicalOr+=LogicalOrExpression)*
		public Group getGroup() { return cGroup; }

		//logicalOr+=LogicalOrExpression
		public Assignment getLogicalOrAssignment_0() { return cLogicalOrAssignment_0; }

		//LogicalOrExpression
		public RuleCall getLogicalOrLogicalOrExpressionParserRuleCall_0_0() { return cLogicalOrLogicalOrExpressionParserRuleCall_0_0; }

		//("subsetof" logicalOr+=LogicalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"subsetof"
		public Keyword getSubsetofKeyword_1_0() { return cSubsetofKeyword_1_0; }

		//logicalOr+=LogicalOrExpression
		public Assignment getLogicalOrAssignment_1_1() { return cLogicalOrAssignment_1_1; }

		//LogicalOrExpression
		public RuleCall getLogicalOrLogicalOrExpressionParserRuleCall_1_1_0() { return cLogicalOrLogicalOrExpressionParserRuleCall_1_1_0; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicalAndAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicalAndLogicalAndExpressionParserRuleCall_0_0 = (RuleCall)cLogicalAndAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLogicalAndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLogicalAndLogicalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cLogicalAndAssignment_1_1.eContents().get(0);
		
		//LogicalOrExpression:
		//	logicalAnd+=LogicalAndExpression ("||" logicalAnd+=LogicalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//logicalAnd+=LogicalAndExpression ("||" logicalAnd+=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }

		//logicalAnd+=LogicalAndExpression
		public Assignment getLogicalAndAssignment_0() { return cLogicalAndAssignment_0; }

		//LogicalAndExpression
		public RuleCall getLogicalAndLogicalAndExpressionParserRuleCall_0_0() { return cLogicalAndLogicalAndExpressionParserRuleCall_0_0; }

		//("||" logicalAnd+=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//logicalAnd+=LogicalAndExpression
		public Assignment getLogicalAndAssignment_1_1() { return cLogicalAndAssignment_1_1; }

		//LogicalAndExpression
		public RuleCall getLogicalAndLogicalAndExpressionParserRuleCall_1_1_0() { return cLogicalAndLogicalAndExpressionParserRuleCall_1_1_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBitwiseOrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBitwiseOrBitwiseOrExpressionParserRuleCall_0_0 = (RuleCall)cBitwiseOrAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBitwiseOrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBitwiseOrBitwiseOrExpressionParserRuleCall_1_1_0 = (RuleCall)cBitwiseOrAssignment_1_1.eContents().get(0);
		
		//LogicalAndExpression:
		//	bitwiseOr+=BitwiseOrExpression ("&&" bitwiseOr+=BitwiseOrExpression)*;
		public ParserRule getRule() { return rule; }

		//bitwiseOr+=BitwiseOrExpression ("&&" bitwiseOr+=BitwiseOrExpression)*
		public Group getGroup() { return cGroup; }

		//bitwiseOr+=BitwiseOrExpression
		public Assignment getBitwiseOrAssignment_0() { return cBitwiseOrAssignment_0; }

		//BitwiseOrExpression
		public RuleCall getBitwiseOrBitwiseOrExpressionParserRuleCall_0_0() { return cBitwiseOrBitwiseOrExpressionParserRuleCall_0_0; }

		//("&&" bitwiseOr+=BitwiseOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//bitwiseOr+=BitwiseOrExpression
		public Assignment getBitwiseOrAssignment_1_1() { return cBitwiseOrAssignment_1_1; }

		//BitwiseOrExpression
		public RuleCall getBitwiseOrBitwiseOrExpressionParserRuleCall_1_1_0() { return cBitwiseOrBitwiseOrExpressionParserRuleCall_1_1_0; }
	}

	public class BitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBitwiseXorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBitwiseXorBitwiseXorExpressionParserRuleCall_0_0 = (RuleCall)cBitwiseXorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBitwiseXorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBitwiseXorBitwiseXorExpressionParserRuleCall_1_1_0 = (RuleCall)cBitwiseXorAssignment_1_1.eContents().get(0);
		
		//BitwiseOrExpression:
		//	bitwiseXor+=BitwiseXorExpression ("|" bitwiseXor+=BitwiseXorExpression)*;
		public ParserRule getRule() { return rule; }

		//bitwiseXor+=BitwiseXorExpression ("|" bitwiseXor+=BitwiseXorExpression)*
		public Group getGroup() { return cGroup; }

		//bitwiseXor+=BitwiseXorExpression
		public Assignment getBitwiseXorAssignment_0() { return cBitwiseXorAssignment_0; }

		//BitwiseXorExpression
		public RuleCall getBitwiseXorBitwiseXorExpressionParserRuleCall_0_0() { return cBitwiseXorBitwiseXorExpressionParserRuleCall_0_0; }

		//("|" bitwiseXor+=BitwiseXorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//bitwiseXor+=BitwiseXorExpression
		public Assignment getBitwiseXorAssignment_1_1() { return cBitwiseXorAssignment_1_1; }

		//BitwiseXorExpression
		public RuleCall getBitwiseXorBitwiseXorExpressionParserRuleCall_1_1_0() { return cBitwiseXorBitwiseXorExpressionParserRuleCall_1_1_0; }
	}

	public class BitwiseXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBitwiseAndAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBitwiseAndBitwiseAndExpressionParserRuleCall_0_0 = (RuleCall)cBitwiseAndAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBitwiseAndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBitwiseAndBitwiseAndExpressionParserRuleCall_1_1_0 = (RuleCall)cBitwiseAndAssignment_1_1.eContents().get(0);
		
		//BitwiseXorExpression:
		//	bitwiseAnd+=BitwiseAndExpression ("^" bitwiseAnd+=BitwiseAndExpression)*;
		public ParserRule getRule() { return rule; }

		//bitwiseAnd+=BitwiseAndExpression ("^" bitwiseAnd+=BitwiseAndExpression)*
		public Group getGroup() { return cGroup; }

		//bitwiseAnd+=BitwiseAndExpression
		public Assignment getBitwiseAndAssignment_0() { return cBitwiseAndAssignment_0; }

		//BitwiseAndExpression
		public RuleCall getBitwiseAndBitwiseAndExpressionParserRuleCall_0_0() { return cBitwiseAndBitwiseAndExpressionParserRuleCall_0_0; }

		//("^" bitwiseAnd+=BitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//bitwiseAnd+=BitwiseAndExpression
		public Assignment getBitwiseAndAssignment_1_1() { return cBitwiseAndAssignment_1_1; }

		//BitwiseAndExpression
		public RuleCall getBitwiseAndBitwiseAndExpressionParserRuleCall_1_1_0() { return cBitwiseAndBitwiseAndExpressionParserRuleCall_1_1_0; }
	}

	public class BitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEqualityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEqualityEqualityExpressionParserRuleCall_0_0 = (RuleCall)cEqualityAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEqualityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqualityEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cEqualityAssignment_1_1.eContents().get(0);
		
		//BitwiseAndExpression:
		//	equality+=EqualityExpression ("&" equality+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//equality+=EqualityExpression ("&" equality+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//equality+=EqualityExpression
		public Assignment getEqualityAssignment_0() { return cEqualityAssignment_0; }

		//EqualityExpression
		public RuleCall getEqualityEqualityExpressionParserRuleCall_0_0() { return cEqualityEqualityExpressionParserRuleCall_0_0; }

		//("&" equality+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//equality+=EqualityExpression
		public Assignment getEqualityAssignment_1_1() { return cEqualityAssignment_1_1; }

		//EqualityExpression
		public RuleCall getEqualityEqualityExpressionParserRuleCall_1_1_0() { return cEqualityEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationalRelationalExpressionParserRuleCall_0_0 = (RuleCall)cRelationalAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cRelationalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationalRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRelationalAssignment_1_1.eContents().get(0);
		
		//EqualityExpression:
		//	relational+=RelationalExpression (op+=("==" | "!=") relational+=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//relational+=RelationalExpression (op+=("==" | "!=") relational+=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//relational+=RelationalExpression
		public Assignment getRelationalAssignment_0() { return cRelationalAssignment_0; }

		//RelationalExpression
		public RuleCall getRelationalRelationalExpressionParserRuleCall_0_0() { return cRelationalRelationalExpressionParserRuleCall_0_0; }

		//(op+=("==" | "!=") relational+=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=("==" | "!=")
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_0_1; }

		//relational+=RelationalExpression
		public Assignment getRelationalAssignment_1_1() { return cRelationalAssignment_1_1; }

		//RelationalExpression
		public RuleCall getRelationalRelationalExpressionParserRuleCall_1_1_0() { return cRelationalRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditiveAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cAdditiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_0_2 = (Keyword)cOpAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_0_3 = (Keyword)cOpAlternatives_1_0_0.eContents().get(3);
		private final Assignment cAdditiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdditiveAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cAdditiveAssignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//	additive+=AdditiveExpression (op+=(">" | "<" | ">=" | "<=") additive+=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//additive+=AdditiveExpression (op+=(">" | "<" | ">=" | "<=") additive+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//additive+=AdditiveExpression
		public Assignment getAdditiveAssignment_0() { return cAdditiveAssignment_0; }

		//AdditiveExpression
		public RuleCall getAdditiveAdditiveExpressionParserRuleCall_0_0() { return cAdditiveAdditiveExpressionParserRuleCall_0_0; }

		//(op+=(">" | "<" | ">=" | "<=") additive+=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=(">" | "<" | ">=" | "<=")
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//">" | "<" | ">=" | "<="
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_0_0() { return cOpGreaterThanSignKeyword_1_0_0_0; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_0_1() { return cOpLessThanSignKeyword_1_0_0_1; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_0_0_2; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_0_3; }

		//additive+=AdditiveExpression
		public Assignment getAdditiveAssignment_1_1() { return cAdditiveAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getAdditiveAdditiveExpressionParserRuleCall_1_1_0() { return cAdditiveAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicativeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicativeMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cMultiplicativeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cMultiplicativeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicativeMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicativeAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//	multiplicative+=MultiplicativeExpression (op+=("+" | "-") multiplicative+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//multiplicative+=MultiplicativeExpression (op+=("+" | "-") multiplicative+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//multiplicative+=MultiplicativeExpression
		public Assignment getMultiplicativeAssignment_0() { return cMultiplicativeAssignment_0; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeMultiplicativeExpressionParserRuleCall_0_0() { return cMultiplicativeMultiplicativeExpressionParserRuleCall_0_0; }

		//(op+=("+" | "-") multiplicative+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=("+" | "-")
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0_0() { return cOpPlusSignKeyword_1_0_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_0_1() { return cOpHyphenMinusKeyword_1_0_0_1; }

		//multiplicative+=MultiplicativeExpression
		public Assignment getMultiplicativeAssignment_1_1() { return cMultiplicativeAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeMultiplicativeExpressionParserRuleCall_1_1_0() { return cMultiplicativeMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryUnaryExpressionParserRuleCall_0_0 = (RuleCall)cUnaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_0_2 = (Keyword)cOpAlternatives_1_0_0.eContents().get(2);
		private final Assignment cUnaryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cUnaryAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//	unary+=UnaryExpression (op+=("*" | "/" | "%") unary+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//unary+=UnaryExpression (op+=("*" | "/" | "%") unary+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//unary+=UnaryExpression
		public Assignment getUnaryAssignment_0() { return cUnaryAssignment_0; }

		//UnaryExpression
		public RuleCall getUnaryUnaryExpressionParserRuleCall_0_0() { return cUnaryUnaryExpressionParserRuleCall_0_0; }

		//(op+=("*" | "/" | "%") unary+=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=("*" | "/" | "%")
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//"*" | "/" | "%"
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_0_0() { return cOpAsteriskKeyword_1_0_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_0_1() { return cOpSolidusKeyword_1_0_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_0_0_2() { return cOpPercentSignKeyword_1_0_0_2; }

		//unary+=UnaryExpression
		public Assignment getUnaryAssignment_1_1() { return cUnaryAssignment_1_1; }

		//UnaryExpression
		public RuleCall getUnaryUnaryExpressionParserRuleCall_1_1_0() { return cUnaryUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpTildeKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Keyword cOpHyphenMinusKeyword_0_0_3 = (Keyword)cOpAlternatives_0_0.eContents().get(3);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	op=("!" | "~" | "+" | "-")? right=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//op=("!" | "~" | "+" | "-")? right=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//op=("!" | "~" | "+" | "-")?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"!" | "~" | "+" | "-"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_0_0_0() { return cOpExclamationMarkKeyword_0_0_0; }

		//"~"
		public Keyword getOpTildeKeyword_0_0_1() { return cOpTildeKeyword_0_0_1; }

		//"+"
		public Keyword getOpPlusSignKeyword_0_0_2() { return cOpPlusSignKeyword_0_0_2; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_0_3() { return cOpHyphenMinusKeyword_0_0_3; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_0() { return cRightPrimaryExpressionParserRuleCall_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cMemberExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression:
		//	"(" Expression ")" | MemberExpression | Literal;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | MemberExpression | Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//MemberExpression
		public RuleCall getMemberExpressionParserRuleCall_1() { return cMemberExpressionParserRuleCall_1; }

		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
	}

	public class MemberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMemberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMemberMemberPartParserRuleCall_0_0 = (RuleCall)cMemberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMemberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMemberMemberPartParserRuleCall_1_1_0 = (RuleCall)cMemberAssignment_1_1.eContents().get(0);
		
		//MemberExpression:
		//	member+=MemberPart ("." member+=MemberPart)*;
		public ParserRule getRule() { return rule; }

		//member+=MemberPart ("." member+=MemberPart)*
		public Group getGroup() { return cGroup; }

		//member+=MemberPart
		public Assignment getMemberAssignment_0() { return cMemberAssignment_0; }

		//MemberPart
		public RuleCall getMemberMemberPartParserRuleCall_0_0() { return cMemberMemberPartParserRuleCall_0_0; }

		//("." member+=MemberPart)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//member+=MemberPart
		public Assignment getMemberAssignment_1_1() { return cMemberAssignment_1_1; }

		//MemberPart
		public RuleCall getMemberMemberPartParserRuleCall_1_1_0() { return cMemberMemberPartParserRuleCall_1_1_0; }
	}

	public class MemberPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberArgumentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMemberArgumentsMemberArgumentsParserRuleCall_1_2_0 = (RuleCall)cMemberArgumentsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMemberPartAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cInKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMemberPartAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cOutKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//MemberPart:
		//	name=ID | name=ID "(" memberArguments=MemberArguments ")" | {MemberPart} "in" | {MemberPart} "out";
		public ParserRule getRule() { return rule; }

		//name=ID | name=ID "(" memberArguments=MemberArguments ")" | {MemberPart} "in" | {MemberPart} "out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//name=ID "(" memberArguments=MemberArguments ")"
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//memberArguments=MemberArguments
		public Assignment getMemberArgumentsAssignment_1_2() { return cMemberArgumentsAssignment_1_2; }

		//MemberArguments
		public RuleCall getMemberArgumentsMemberArgumentsParserRuleCall_1_2_0() { return cMemberArgumentsMemberArgumentsParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//{MemberPart} "in"
		public Group getGroup_2() { return cGroup_2; }

		//{MemberPart}
		public Action getMemberPartAction_2_0() { return cMemberPartAction_2_0; }

		//"in"
		public Keyword getInKeyword_2_1() { return cInKeyword_2_1; }

		//{MemberPart} "out"
		public Group getGroup_3() { return cGroup_3; }

		//{MemberPart}
		public Action getMemberPartAction_3_0() { return cMemberPartAction_3_0; }

		//"out"
		public Keyword getOutKeyword_3_1() { return cOutKeyword_3_1; }
	}

	public class MemberArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//MemberArguments:
		//	expression+=Expression ("," expression+=Expression)*;
		public ParserRule getRule() { return rule; }

		//expression+=Expression ("," expression+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression+=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//("," expression+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression+=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTEGER_LITERALParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cREAL_LITERALParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cBOOLEAN_LITERALParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//Literal:
		//	SetLiteral | {Literal} INTEGER_LITERAL | {Literal} REAL_LITERAL | BOOLEAN_LITERAL | {Literal} STRING;
		public ParserRule getRule() { return rule; }

		//SetLiteral | {Literal} INTEGER_LITERAL | {Literal} REAL_LITERAL | BOOLEAN_LITERAL | {Literal} STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetLiteral
		public RuleCall getSetLiteralParserRuleCall_0() { return cSetLiteralParserRuleCall_0; }

		//{Literal} INTEGER_LITERAL
		public Group getGroup_1() { return cGroup_1; }

		//{Literal}
		public Action getLiteralAction_1_0() { return cLiteralAction_1_0; }

		//INTEGER_LITERAL
		public RuleCall getINTEGER_LITERALParserRuleCall_1_1() { return cINTEGER_LITERALParserRuleCall_1_1; }

		//{Literal} REAL_LITERAL
		public Group getGroup_2() { return cGroup_2; }

		//{Literal}
		public Action getLiteralAction_2_0() { return cLiteralAction_2_0; }

		//REAL_LITERAL
		public RuleCall getREAL_LITERALParserRuleCall_2_1() { return cREAL_LITERALParserRuleCall_2_1; }

		//BOOLEAN_LITERAL
		public RuleCall getBOOLEAN_LITERALParserRuleCall_3() { return cBOOLEAN_LITERALParserRuleCall_3; }

		//{Literal} STRING
		public Group getGroup_4() { return cGroup_4; }

		//{Literal}
		public Action getLiteralAction_4_0() { return cLiteralAction_4_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4_1() { return cSTRINGTerminalRuleCall_4_1; }
	}

	public class SetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_2_0_0 = (RuleCall)cLiteralAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_2_1_1_0 = (RuleCall)cLiteralAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetLiteral:
		//	{SetLiteral} "[" (literal+=Literal ("," literal+=Literal)*)? "]";
		public ParserRule getRule() { return rule; }

		//{SetLiteral} "[" (literal+=Literal ("," literal+=Literal)*)? "]"
		public Group getGroup() { return cGroup; }

		//{SetLiteral}
		public Action getSetLiteralAction_0() { return cSetLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(literal+=Literal ("," literal+=Literal)*)?
		public Group getGroup_2() { return cGroup_2; }

		//literal+=Literal
		public Assignment getLiteralAssignment_2_0() { return cLiteralAssignment_2_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_2_0_0() { return cLiteralLiteralParserRuleCall_2_0_0; }

		//("," literal+=Literal)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//literal+=Literal
		public Assignment getLiteralAssignment_2_1_1() { return cLiteralAssignment_2_1_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_2_1_1_0() { return cLiteralLiteralParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class INTEGER_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_LITERAL");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTEGER_LITERAL:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class REAL_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL_LITERAL:
		//	INT* "." INT;
		public ParserRule getRule() { return rule; }

		//INT* "." INT
		public Group getGroup() { return cGroup; }

		//INT*
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class BOOLEAN_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBOOLEAN_LITERALAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBOOLEAN_LITERALAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTrueKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBOOLEAN_LITERALAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFalseKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//BOOLEAN_LITERAL:
		//	{BOOLEAN_LITERAL} "#" STRING | {BOOLEAN_LITERAL} "true" | {BOOLEAN_LITERAL} "false";
		public ParserRule getRule() { return rule; }

		//{BOOLEAN_LITERAL} "#" STRING | {BOOLEAN_LITERAL} "true" | {BOOLEAN_LITERAL} "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BOOLEAN_LITERAL} "#" STRING
		public Group getGroup_0() { return cGroup_0; }

		//{BOOLEAN_LITERAL}
		public Action getBOOLEAN_LITERALAction_0_0() { return cBOOLEAN_LITERALAction_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }

		//{BOOLEAN_LITERAL} "true"
		public Group getGroup_1() { return cGroup_1; }

		//{BOOLEAN_LITERAL}
		public Action getBOOLEAN_LITERALAction_1_0() { return cBOOLEAN_LITERALAction_1_0; }

		//"true"
		public Keyword getTrueKeyword_1_1() { return cTrueKeyword_1_1; }

		//{BOOLEAN_LITERAL} "false"
		public Group getGroup_2() { return cGroup_2; }

		//{BOOLEAN_LITERAL}
		public Action getBOOLEAN_LITERALAction_2_0() { return cBOOLEAN_LITERALAction_2_0; }

		//"false"
		public Keyword getFalseKeyword_2_1() { return cFalseKeyword_2_1; }
	}
	
	
	private GraspSpecificationElements pGraspSpecification;
	private ArchitectureElements pArchitecture;
	private ArchitectureBodyElements pArchitectureBody;
	private DeclarationStartElements pDeclarationStart;
	private DeclarationEndElements pDeclarationEnd;
	private DeclarationElements pDeclaration;
	private RequirementOrQualityElements pRequirementOrQuality;
	private RequirementElements pRequirement;
	private QattributeElements pQattribute;
	private RationaleElements pRationale;
	private ReasonElements pReason;
	private TemplateElements pTemplate;
	private TemplateConstituentElements pTemplateConstituent;
	private ProvidesElements pProvides;
	private ProvidesConstituentElements pProvidesConstituent;
	private RequiresElements pRequires;
	private RequiresConstituentElements pRequiresConstituent;
	private PropertyElements pProperty;
	private CheckElements pCheck;
	private SystemElements pSystem;
	private SystemConstituentElements pSystemConstituent;
	private CompositionalElements pCompositional;
	private LayerElements pLayer;
	private LayerConstituentElements pLayerConstituent;
	private ComponentElements pComponent;
	private ConnectorElements pConnector;
	private InstantiableConstituentElements pInstantiableConstituent;
	private LinkElements pLink;
	private LinkConstituentElements pLinkConstituent;
	private LinkConsumerExpressionElements pLinkConsumerExpression;
	private LinkConsumerPartElements pLinkConsumerPart;
	private LinkProvidersListElements pLinkProvidersList;
	private LinkProvidersElements pLinkProviders;
	private LinkProviderPartElements pLinkProviderPart;
	private AnnotationElements pAnnotation;
	private NameValueElements pNameValue;
	private NameValuesElements pNameValues;
	private SupportsClauseElements pSupportsClause;
	private InhibitsClauseElements pInhibitsClause;
	private BecauseClauseElements pBecauseClause;
	private BecauseCausalcontextElements pBecauseCausalcontext;
	private ParameterListElements pParameterList;
	private ArgumentListElements pArgumentList;
	private ExpressionElements pExpression;
	private SubsetofExpressionElements pSubsetofExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private BitwiseOrExpressionElements pBitwiseOrExpression;
	private BitwiseXorExpressionElements pBitwiseXorExpression;
	private BitwiseAndExpressionElements pBitwiseAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private RelationalExpressionElements pRelationalExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private MemberExpressionElements pMemberExpression;
	private MemberPartElements pMemberPart;
	private MemberArgumentsElements pMemberArguments;
	private LiteralElements pLiteral;
	private SetLiteralElements pSetLiteral;
	private INTEGER_LITERALElements pINTEGER_LITERAL;
	private REAL_LITERALElements pREAL_LITERAL;
	private BOOLEAN_LITERALElements pBOOLEAN_LITERAL;
	private TerminalRule tKEYWORD;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraspDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.standrews.graspide.grasp.GraspDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraspSpecification:
	//	architecture=Architecture;
	public GraspSpecificationElements getGraspSpecificationAccess() {
		return (pGraspSpecification != null) ? pGraspSpecification : (pGraspSpecification = new GraspSpecificationElements());
	}
	
	public ParserRule getGraspSpecificationRule() {
		return getGraspSpecificationAccess().getRule();
	}

	//Architecture:
	//	annotation+=Annotation* "architecture" name=ID "{" architecutrebody=ArchitectureBody "}";
	public ArchitectureElements getArchitectureAccess() {
		return (pArchitecture != null) ? pArchitecture : (pArchitecture = new ArchitectureElements());
	}
	
	public ParserRule getArchitectureRule() {
		return getArchitectureAccess().getRule();
	}

	//ArchitectureBody:
	//	annotation+=Annotation* declarationStart=DeclarationStart system=System declarationEnd=DeclarationEnd;
	public ArchitectureBodyElements getArchitectureBodyAccess() {
		return (pArchitectureBody != null) ? pArchitectureBody : (pArchitectureBody = new ArchitectureBodyElements());
	}
	
	public ParserRule getArchitectureBodyRule() {
		return getArchitectureBodyAccess().getRule();
	}

	//DeclarationStart:
	//	{DeclarationStart} (declaration+=Declaration annotation+=Annotation*)*;
	public DeclarationStartElements getDeclarationStartAccess() {
		return (pDeclarationStart != null) ? pDeclarationStart : (pDeclarationStart = new DeclarationStartElements());
	}
	
	public ParserRule getDeclarationStartRule() {
		return getDeclarationStartAccess().getRule();
	}

	//DeclarationEnd:
	//	{DeclarationEnd} (annotation+=Annotation* declaration+=Declaration)*;
	public DeclarationEndElements getDeclarationEndAccess() {
		return (pDeclarationEnd != null) ? pDeclarationEnd : (pDeclarationEnd = new DeclarationEndElements());
	}
	
	public ParserRule getDeclarationEndRule() {
		return getDeclarationEndAccess().getRule();
	}

	//Declaration:
	//	RequirementOrQuality | Rationale | Template;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//RequirementOrQuality:
	//	Requirement | Qattribute;
	public RequirementOrQualityElements getRequirementOrQualityAccess() {
		return (pRequirementOrQuality != null) ? pRequirementOrQuality : (pRequirementOrQuality = new RequirementOrQualityElements());
	}
	
	public ParserRule getRequirementOrQualityRule() {
		return getRequirementOrQualityAccess().getRule();
	}

	//Requirement:
	//	"requirement" name=ID ("=" stringLiteral=STRING)? ";";
	public RequirementElements getRequirementAccess() {
		return (pRequirement != null) ? pRequirement : (pRequirement = new RequirementElements());
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}

	//Qattribute:
	//	"quality_attribute" name=ID ("=" expression=Expression)? supportsClause=SupportsClause? ";";
	public QattributeElements getQattributeAccess() {
		return (pQattribute != null) ? pQattribute : (pQattribute = new QattributeElements());
	}
	
	public ParserRule getQattributeRule() {
		return getQattributeAccess().getRule();
	}

	//Rationale:
	//	"rationale" name=ID "(" parameterList=ParameterList? ")" ("extends" superRationale=[Rationale])? "{" reason+=Reason*
	//	"}";
	public RationaleElements getRationaleAccess() {
		return (pRationale != null) ? pRationale : (pRationale = new RationaleElements());
	}
	
	public ParserRule getRationaleRule() {
		return getRationaleAccess().getRule();
	}

	//Reason:
	//	reasonAnnotation+=Annotation* "reason" (expression=Expression | supportsClause=SupportsClause)
	//	inhibitsClause=InhibitsClause? ";";
	public ReasonElements getReasonAccess() {
		return (pReason != null) ? pReason : (pReason = new ReasonElements());
	}
	
	public ParserRule getReasonRule() {
		return getReasonAccess().getRule();
	}

	//Template:
	//	"template" name=ID (":" integerLiteral=INTEGER_LITERAL)? "(" parameterList=ParameterList? ")" ("extends"
	//	superTemplate=[Template])? "{" (templateAnnotation+=Annotation* templateConstituent+=TemplateConstituent)* "}";
	public TemplateElements getTemplateAccess() {
		return (pTemplate != null) ? pTemplate : (pTemplate = new TemplateElements());
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//TemplateConstituent:
	//	Template | Provides | Requires | Property | Check;
	public TemplateConstituentElements getTemplateConstituentAccess() {
		return (pTemplateConstituent != null) ? pTemplateConstituent : (pTemplateConstituent = new TemplateConstituentElements());
	}
	
	public ParserRule getTemplateConstituentRule() {
		return getTemplateConstituentAccess().getRule();
	}

	//Provides:
	//	"provides" name=ID (":" value=INTEGER_LITERAL)? type=ID? becauseClause=BecauseClause? ("{"
	//	providesConstituent+=ProvidesConstituent* "}" | ";");
	public ProvidesElements getProvidesAccess() {
		return (pProvides != null) ? pProvides : (pProvides = new ProvidesElements());
	}
	
	public ParserRule getProvidesRule() {
		return getProvidesAccess().getRule();
	}

	//ProvidesConstituent:
	//	providesAnnotation+=Annotation* check=Check;
	public ProvidesConstituentElements getProvidesConstituentAccess() {
		return (pProvidesConstituent != null) ? pProvidesConstituent : (pProvidesConstituent = new ProvidesConstituentElements());
	}
	
	public ParserRule getProvidesConstituentRule() {
		return getProvidesConstituentAccess().getRule();
	}

	//Requires:
	//	"requires" type=ID value=ID? becauseRequiresClause=BecauseClause? ("{" requiresConstituent+=RequiresConstituent* "}"
	//	| ";");
	public RequiresElements getRequiresAccess() {
		return (pRequires != null) ? pRequires : (pRequires = new RequiresElements());
	}
	
	public ParserRule getRequiresRule() {
		return getRequiresAccess().getRule();
	}

	//RequiresConstituent:
	//	requiresAnnotation+=Annotation* check=Check;
	public RequiresConstituentElements getRequiresConstituentAccess() {
		return (pRequiresConstituent != null) ? pRequiresConstituent : (pRequiresConstituent = new RequiresConstituentElements());
	}
	
	public ParserRule getRequiresConstituentRule() {
		return getRequiresConstituentAccess().getRule();
	}

	//Property:
	//	"property" name=ID ("=" expression=Expression)? becauseClause=BecauseClause? ";";
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Check:
	//	"check" expression=Expression becauseClause=BecauseClause? ";";
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//System:
	//	"system" name=ID becauseClause=BecauseClause? "{" (systemAnnotation+=Annotation*
	//	systemConstituent+=SystemConstituent)* "}";
	public SystemElements getSystemAccess() {
		return (pSystem != null) ? pSystem : (pSystem = new SystemElements());
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//SystemConstituent:
	//	Compositional | Check;
	public SystemConstituentElements getSystemConstituentAccess() {
		return (pSystemConstituent != null) ? pSystemConstituent : (pSystemConstituent = new SystemConstituentElements());
	}
	
	public ParserRule getSystemConstituentRule() {
		return getSystemConstituentAccess().getRule();
	}

	//Compositional:
	//	Layer | Component | Connector | Link;
	public CompositionalElements getCompositionalAccess() {
		return (pCompositional != null) ? pCompositional : (pCompositional = new CompositionalElements());
	}
	
	public ParserRule getCompositionalRule() {
		return getCompositionalAccess().getRule();
	}

	//Layer:
	//	"layer" name=ID ("over" superLayer+=[Layer] ("," superLayer+=[Layer])*)? becauseClause=BecauseClause? "{"
	//	(layerAnnotation+=Annotation* layerConstituent+=LayerConstituent)* "}";
	public LayerElements getLayerAccess() {
		return (pLayer != null) ? pLayer : (pLayer = new LayerElements());
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}

	//LayerConstituent:
	//	Compositional | Check;
	public LayerConstituentElements getLayerConstituentAccess() {
		return (pLayerConstituent != null) ? pLayerConstituent : (pLayerConstituent = new LayerConstituentElements());
	}
	
	public ParserRule getLayerConstituentRule() {
		return getLayerConstituentAccess().getRule();
	}

	//Component:
	//	"component" name=ID "=" value=[Template] "(" argumentList=ArgumentList? ")" becauseClause=BecauseClause? ("{"
	//	(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";");
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//Connector:
	//	"connector" name=ID "=" value=[Template] "(" argumentList=ArgumentList? ")" becauseClause=BecauseClause? ("{"
	//	(annotation+=Annotation* instantiableConstituent+=InstantiableConstituent)* "}" | ";");
	public ConnectorElements getConnectorAccess() {
		return (pConnector != null) ? pConnector : (pConnector = new ConnectorElements());
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}

	//InstantiableConstituent:
	//	Compositional | Check;
	public InstantiableConstituentElements getInstantiableConstituentAccess() {
		return (pInstantiableConstituent != null) ? pInstantiableConstituent : (pInstantiableConstituent = new InstantiableConstituentElements());
	}
	
	public ParserRule getInstantiableConstituentRule() {
		return getInstantiableConstituentAccess().getRule();
	}

	//Link:
	//	"link" type=ID? linkConsumer=LinkConsumerExpression "to" linkProviders=LinkProvidersList becauseClause=BecauseClause?
	//	("{" linkConstituent+=LinkConstituent* "}" | ";");
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//LinkConstituent:
	//	annotation+=Annotation* check=Check;
	public LinkConstituentElements getLinkConstituentAccess() {
		return (pLinkConstituent != null) ? pLinkConstituent : (pLinkConstituent = new LinkConstituentElements());
	}
	
	public ParserRule getLinkConstituentRule() {
		return getLinkConstituentAccess().getRule();
	}

	//LinkConsumerExpression:
	//	consumer=[LinkConsumerPart] ("." rightConsumer+=(ID | "out"))*;
	public LinkConsumerExpressionElements getLinkConsumerExpressionAccess() {
		return (pLinkConsumerExpression != null) ? pLinkConsumerExpression : (pLinkConsumerExpression = new LinkConsumerExpressionElements());
	}
	
	public ParserRule getLinkConsumerExpressionRule() {
		return getLinkConsumerExpressionAccess().getRule();
	}

	//LinkConsumerPart:
	//	Layer | Component | Connector | Requires;
	public LinkConsumerPartElements getLinkConsumerPartAccess() {
		return (pLinkConsumerPart != null) ? pLinkConsumerPart : (pLinkConsumerPart = new LinkConsumerPartElements());
	}
	
	public ParserRule getLinkConsumerPartRule() {
		return getLinkConsumerPartAccess().getRule();
	}

	//LinkProvidersList:
	//	providers+=LinkProviders ("," providers+=LinkProviders)*;
	public LinkProvidersListElements getLinkProvidersListAccess() {
		return (pLinkProvidersList != null) ? pLinkProvidersList : (pLinkProvidersList = new LinkProvidersListElements());
	}
	
	public ParserRule getLinkProvidersListRule() {
		return getLinkProvidersListAccess().getRule();
	}

	//LinkProviders:
	//	provider=[LinkProviderPart] ("." rightProvider+=(ID | "in"))*;
	public LinkProvidersElements getLinkProvidersAccess() {
		return (pLinkProviders != null) ? pLinkProviders : (pLinkProviders = new LinkProvidersElements());
	}
	
	public ParserRule getLinkProvidersRule() {
		return getLinkProvidersAccess().getRule();
	}

	//LinkProviderPart:
	//	Layer | Component | Connector | Provides;
	public LinkProviderPartElements getLinkProviderPartAccess() {
		return (pLinkProviderPart != null) ? pLinkProviderPart : (pLinkProviderPart = new LinkProviderPartElements());
	}
	
	public ParserRule getLinkProviderPartRule() {
		return getLinkProviderPartAccess().getRule();
	}

	//Annotation:
	//	"@" annotation=ID? "(" value=NameValues ")";
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//NameValue:
	//	namePair=ID "=" valuePair=Expression;
	public NameValueElements getNameValueAccess() {
		return (pNameValue != null) ? pNameValue : (pNameValue = new NameValueElements());
	}
	
	public ParserRule getNameValueRule() {
		return getNameValueAccess().getRule();
	}

	//NameValues:
	//	members+=NameValue ("," members+=NameValue)*;
	public NameValuesElements getNameValuesAccess() {
		return (pNameValues != null) ? pNameValues : (pNameValues = new NameValuesElements());
	}
	
	public ParserRule getNameValuesRule() {
		return getNameValuesAccess().getRule();
	}

	//SupportsClause:
	//	"supports" value+=[RequirementOrQuality] ("," value+=[RequirementOrQuality])*;
	public SupportsClauseElements getSupportsClauseAccess() {
		return (pSupportsClause != null) ? pSupportsClause : (pSupportsClause = new SupportsClauseElements());
	}
	
	public ParserRule getSupportsClauseRule() {
		return getSupportsClauseAccess().getRule();
	}

	//InhibitsClause:
	//	"inhibits" value+=[RequirementOrQuality] ("," value+=[RequirementOrQuality])*;
	public InhibitsClauseElements getInhibitsClauseAccess() {
		return (pInhibitsClause != null) ? pInhibitsClause : (pInhibitsClause = new InhibitsClauseElements());
	}
	
	public ParserRule getInhibitsClauseRule() {
		return getInhibitsClauseAccess().getRule();
	}

	//BecauseClause:
	//	"because" members+=BecauseCausalcontext ("," members+=BecauseCausalcontext)*;
	public BecauseClauseElements getBecauseClauseAccess() {
		return (pBecauseClause != null) ? pBecauseClause : (pBecauseClause = new BecauseClauseElements());
	}
	
	public ParserRule getBecauseClauseRule() {
		return getBecauseClauseAccess().getRule();
	}

	//BecauseCausalcontext:
	//	value=[Rationale] "(" argumentList=ArgumentList? ")";
	public BecauseCausalcontextElements getBecauseCausalcontextAccess() {
		return (pBecauseCausalcontext != null) ? pBecauseCausalcontext : (pBecauseCausalcontext = new BecauseCausalcontextElements());
	}
	
	public ParserRule getBecauseCausalcontextRule() {
		return getBecauseCausalcontextAccess().getRule();
	}

	//ParameterList:
	//	names+=ID ("," names+=ID)*;
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//ArgumentList:
	//	members+=MemberExpression ("," members+=MemberExpression)*;
	public ArgumentListElements getArgumentListAccess() {
		return (pArgumentList != null) ? pArgumentList : (pArgumentList = new ArgumentListElements());
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//Expression:
	//	SubsetofExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SubsetofExpression:
	//	logicalOr+=LogicalOrExpression ("subsetof" logicalOr+=LogicalOrExpression)*;
	public SubsetofExpressionElements getSubsetofExpressionAccess() {
		return (pSubsetofExpression != null) ? pSubsetofExpression : (pSubsetofExpression = new SubsetofExpressionElements());
	}
	
	public ParserRule getSubsetofExpressionRule() {
		return getSubsetofExpressionAccess().getRule();
	}

	//LogicalOrExpression:
	//	logicalAnd+=LogicalAndExpression ("||" logicalAnd+=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression:
	//	bitwiseOr+=BitwiseOrExpression ("&&" bitwiseOr+=BitwiseOrExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//BitwiseOrExpression:
	//	bitwiseXor+=BitwiseXorExpression ("|" bitwiseXor+=BitwiseXorExpression)*;
	public BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return (pBitwiseOrExpression != null) ? pBitwiseOrExpression : (pBitwiseOrExpression = new BitwiseOrExpressionElements());
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseXorExpression:
	//	bitwiseAnd+=BitwiseAndExpression ("^" bitwiseAnd+=BitwiseAndExpression)*;
	public BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return (pBitwiseXorExpression != null) ? pBitwiseXorExpression : (pBitwiseXorExpression = new BitwiseXorExpressionElements());
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseAndExpression:
	//	equality+=EqualityExpression ("&" equality+=EqualityExpression)*;
	public BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return (pBitwiseAndExpression != null) ? pBitwiseAndExpression : (pBitwiseAndExpression = new BitwiseAndExpressionElements());
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//EqualityExpression:
	//	relational+=RelationalExpression (op+=("==" | "!=") relational+=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//RelationalExpression:
	//	additive+=AdditiveExpression (op+=(">" | "<" | ">=" | "<=") additive+=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	multiplicative+=MultiplicativeExpression (op+=("+" | "-") multiplicative+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	unary+=UnaryExpression (op+=("*" | "/" | "%") unary+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression:
	//	op=("!" | "~" | "+" | "-")? right=PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//	"(" Expression ")" | MemberExpression | Literal;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//MemberExpression:
	//	member+=MemberPart ("." member+=MemberPart)*;
	public MemberExpressionElements getMemberExpressionAccess() {
		return (pMemberExpression != null) ? pMemberExpression : (pMemberExpression = new MemberExpressionElements());
	}
	
	public ParserRule getMemberExpressionRule() {
		return getMemberExpressionAccess().getRule();
	}

	//MemberPart:
	//	name=ID | name=ID "(" memberArguments=MemberArguments ")" | {MemberPart} "in" | {MemberPart} "out";
	public MemberPartElements getMemberPartAccess() {
		return (pMemberPart != null) ? pMemberPart : (pMemberPart = new MemberPartElements());
	}
	
	public ParserRule getMemberPartRule() {
		return getMemberPartAccess().getRule();
	}

	//MemberArguments:
	//	expression+=Expression ("," expression+=Expression)*;
	public MemberArgumentsElements getMemberArgumentsAccess() {
		return (pMemberArguments != null) ? pMemberArguments : (pMemberArguments = new MemberArgumentsElements());
	}
	
	public ParserRule getMemberArgumentsRule() {
		return getMemberArgumentsAccess().getRule();
	}

	//Literal:
	//	SetLiteral | {Literal} INTEGER_LITERAL | {Literal} REAL_LITERAL | BOOLEAN_LITERAL | {Literal} STRING;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//SetLiteral:
	//	{SetLiteral} "[" (literal+=Literal ("," literal+=Literal)*)? "]";
	public SetLiteralElements getSetLiteralAccess() {
		return (pSetLiteral != null) ? pSetLiteral : (pSetLiteral = new SetLiteralElements());
	}
	
	public ParserRule getSetLiteralRule() {
		return getSetLiteralAccess().getRule();
	}

	//INTEGER_LITERAL:
	//	INT;
	public INTEGER_LITERALElements getINTEGER_LITERALAccess() {
		return (pINTEGER_LITERAL != null) ? pINTEGER_LITERAL : (pINTEGER_LITERAL = new INTEGER_LITERALElements());
	}
	
	public ParserRule getINTEGER_LITERALRule() {
		return getINTEGER_LITERALAccess().getRule();
	}

	//REAL_LITERAL:
	//	INT* "." INT;
	public REAL_LITERALElements getREAL_LITERALAccess() {
		return (pREAL_LITERAL != null) ? pREAL_LITERAL : (pREAL_LITERAL = new REAL_LITERALElements());
	}
	
	public ParserRule getREAL_LITERALRule() {
		return getREAL_LITERALAccess().getRule();
	}

	//BOOLEAN_LITERAL:
	//	{BOOLEAN_LITERAL} "#" STRING | {BOOLEAN_LITERAL} "true" | {BOOLEAN_LITERAL} "false";
	public BOOLEAN_LITERALElements getBOOLEAN_LITERALAccess() {
		return (pBOOLEAN_LITERAL != null) ? pBOOLEAN_LITERAL : (pBOOLEAN_LITERAL = new BOOLEAN_LITERALElements());
	}
	
	public ParserRule getBOOLEAN_LITERALRule() {
		return getBOOLEAN_LITERALAccess().getRule();
	}

	////terminal HEX_DIGIT: INT* (('a'..'f') | ('A'..'F'))
	////;
	/// *terminal ID : (('a'..'z') | ('A'..'Z') | '_') (('a'..'z') | ('A'..'Z') | '0'..'9' |
	//'_')*
	//;* / terminal KEYWORD:
	//	"architecture" | "requirement" | "QualityAttribute" | "rationale" | "reason" | "template" | "provides" | "requires" |
	//	"property" | "check" | "system" | "layer" | "component" | "connector" | "link" | "supports" | "inhibits" | "extends"
	//	| "because" | "over" | "to" | "in" | "out" | "subsetof" | "true" | "false";
	public TerminalRule getKEYWORDRule() {
		return (tKEYWORD != null) ? tKEYWORD : (tKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORD"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
