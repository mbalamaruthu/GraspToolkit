/*
* generated by Xtext
*/
grammar InternalGraspDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uk.ac.standrews.graspide.grasp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.standrews.graspide.grasp.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.standrews.graspide.grasp.services.GraspDSLGrammarAccess;

}

@parser::members {

 	private GraspDSLGrammarAccess grammarAccess;
 	
    public InternalGraspDSLParser(TokenStream input, GraspDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "GraspSpecification";	
   	}
   	
   	@Override
   	protected GraspDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGraspSpecification
entryRuleGraspSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraspSpecificationRule()); }
	 iv_ruleGraspSpecification=ruleGraspSpecification 
	 { $current=$iv_ruleGraspSpecification.current; } 
	 EOF 
;

// Rule GraspSpecification
ruleGraspSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraspSpecificationAccess().getArchitectureArchitectureParserRuleCall_0()); 
	    }
		lv_architecture_0_0=ruleArchitecture		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraspSpecificationRule());
	        }
       		set(
       			$current, 
       			"architecture",
        		lv_architecture_0_0, 
        		"Architecture");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArchitecture
entryRuleArchitecture returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArchitectureRule()); }
	 iv_ruleArchitecture=ruleArchitecture 
	 { $current=$iv_ruleArchitecture.current; } 
	 EOF 
;

// Rule Architecture
ruleArchitecture returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureAccess().getAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='architecture' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArchitectureAccess().getArchitectureKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getArchitectureAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArchitectureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArchitectureAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureAccess().getArchitecutrebodyArchitectureBodyParserRuleCall_4_0()); 
	    }
		lv_architecutrebody_4_0=ruleArchitectureBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureRule());
	        }
       		set(
       			$current, 
       			"architecutrebody",
        		lv_architecutrebody_4_0, 
        		"ArchitectureBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArchitectureAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleArchitectureBody
entryRuleArchitectureBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArchitectureBodyRule()); }
	 iv_ruleArchitectureBody=ruleArchitectureBody 
	 { $current=$iv_ruleArchitectureBody.current; } 
	 EOF 
;

// Rule ArchitectureBody
ruleArchitectureBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureBodyAccess().getAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureBodyRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureBodyAccess().getDeclarationStartDeclarationStartParserRuleCall_1_0()); 
	    }
		lv_declarationStart_1_0=ruleDeclarationStart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureBodyRule());
	        }
       		set(
       			$current, 
       			"declarationStart",
        		lv_declarationStart_1_0, 
        		"DeclarationStart");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureBodyAccess().getSystemSystemParserRuleCall_2_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureBodyRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureBodyAccess().getDeclarationEndDeclarationEndParserRuleCall_3_0()); 
	    }
		lv_declarationEnd_3_0=ruleDeclarationEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureBodyRule());
	        }
       		set(
       			$current, 
       			"declarationEnd",
        		lv_declarationEnd_3_0, 
        		"DeclarationEnd");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclarationStart
entryRuleDeclarationStart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationStartRule()); }
	 iv_ruleDeclarationStart=ruleDeclarationStart 
	 { $current=$iv_ruleDeclarationStart.current; } 
	 EOF 
;

// Rule DeclarationStart
ruleDeclarationStart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeclarationStartAccess().getDeclarationStartAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationStartAccess().getDeclarationDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_declaration_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationStartRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationStartAccess().getAnnotationAnnotationParserRuleCall_1_1_0()); 
	    }
		lv_annotation_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationStartRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_2_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*)
;





// Entry rule entryRuleDeclarationEnd
entryRuleDeclarationEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationEndRule()); }
	 iv_ruleDeclarationEnd=ruleDeclarationEnd 
	 { $current=$iv_ruleDeclarationEnd.current; } 
	 EOF 
;

// Rule DeclarationEnd
ruleDeclarationEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeclarationEndAccess().getDeclarationEndAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationEndAccess().getAnnotationAnnotationParserRuleCall_1_0_0()); 
	    }
		lv_annotation_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationEndRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationEndAccess().getDeclarationDeclarationParserRuleCall_1_1_0()); 
	    }
		lv_declaration_2_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationEndRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getRequirementOrQualityParserRuleCall_0()); 
    }
    this_RequirementOrQuality_0=ruleRequirementOrQuality
    { 
        $current = $this_RequirementOrQuality_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getRationaleParserRuleCall_1()); 
    }
    this_Rationale_1=ruleRationale
    { 
        $current = $this_Rationale_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getTemplateParserRuleCall_2()); 
    }
    this_Template_2=ruleTemplate
    { 
        $current = $this_Template_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRequirementOrQuality
entryRuleRequirementOrQuality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequirementOrQualityRule()); }
	 iv_ruleRequirementOrQuality=ruleRequirementOrQuality 
	 { $current=$iv_ruleRequirementOrQuality.current; } 
	 EOF 
;

// Rule RequirementOrQuality
ruleRequirementOrQuality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRequirementOrQualityAccess().getRequirementParserRuleCall_0()); 
    }
    this_Requirement_0=ruleRequirement
    { 
        $current = $this_Requirement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRequirementOrQualityAccess().getQattributeParserRuleCall_1()); 
    }
    this_Qattribute_1=ruleQattribute
    { 
        $current = $this_Qattribute_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	 iv_ruleRequirement=ruleRequirement 
	 { $current=$iv_ruleRequirement.current; } 
	 EOF 
;

// Rule Requirement
ruleRequirement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='requirement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequirementAccess().getRequirementKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequirementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequirementAccess().getEqualsSignKeyword_2_0());
    }
(
(
		lv_stringLiteral_3_0=RULE_STRING
		{
			newLeafNode(lv_stringLiteral_3_0, grammarAccess.getRequirementAccess().getStringLiteralSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequirementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringLiteral",
        		lv_stringLiteral_3_0, 
        		"STRING");
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequirementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleQattribute
entryRuleQattribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQattributeRule()); }
	 iv_ruleQattribute=ruleQattribute 
	 { $current=$iv_ruleQattribute.current; } 
	 EOF 
;

// Rule Qattribute
ruleQattribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='quality_attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQattributeAccess().getQuality_attributeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getQattributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQattributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQattributeAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQattributeAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQattributeRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getQattributeAccess().getSupportsClauseSupportsClauseParserRuleCall_3_0()); 
	    }
		lv_supportsClause_4_0=ruleSupportsClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQattributeRule());
	        }
       		set(
       			$current, 
       			"supportsClause",
        		lv_supportsClause_4_0, 
        		"SupportsClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQattributeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleRationale
entryRuleRationale returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRationaleRule()); }
	 iv_ruleRationale=ruleRationale 
	 { $current=$iv_ruleRationale.current; } 
	 EOF 
;

// Rule Rationale
ruleRationale returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rationale' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRationaleAccess().getRationaleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRationaleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRationaleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRationaleAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRationaleAccess().getParameterListParameterListParserRuleCall_3_0()); 
	    }
		lv_parameterList_3_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRationaleRule());
	        }
       		set(
       			$current, 
       			"parameterList",
        		lv_parameterList_3_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRationaleAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_5='extends' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRationaleAccess().getExtendsKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRationaleRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getRationaleAccess().getSuperRationaleRationaleCrossReference_5_1_0()); 
	}

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRationaleAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRationaleAccess().getReasonReasonParserRuleCall_7_0()); 
	    }
		lv_reason_8_0=ruleReason		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRationaleRule());
	        }
       		add(
       			$current, 
       			"reason",
        		lv_reason_8_0, 
        		"Reason");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRationaleAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleReason
entryRuleReason returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReasonRule()); }
	 iv_ruleReason=ruleReason 
	 { $current=$iv_ruleReason.current; } 
	 EOF 
;

// Rule Reason
ruleReason returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReasonAccess().getReasonAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_reasonAnnotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReasonRule());
	        }
       		add(
       			$current, 
       			"reasonAnnotation",
        		lv_reasonAnnotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='reason' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReasonAccess().getReasonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getReasonAccess().getExpressionExpressionParserRuleCall_2_0_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReasonRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getReasonAccess().getSupportsClauseSupportsClauseParserRuleCall_2_1_0()); 
	    }
		lv_supportsClause_3_0=ruleSupportsClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReasonRule());
	        }
       		set(
       			$current, 
       			"supportsClause",
        		lv_supportsClause_3_0, 
        		"SupportsClause");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getReasonAccess().getInhibitsClauseInhibitsClauseParserRuleCall_3_0()); 
	    }
		lv_inhibitsClause_4_0=ruleInhibitsClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReasonRule());
	        }
       		set(
       			$current, 
       			"inhibitsClause",
        		lv_inhibitsClause_4_0, 
        		"InhibitsClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReasonAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTemplate
entryRuleTemplate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateRule()); }
	 iv_ruleTemplate=ruleTemplate 
	 { $current=$iv_ruleTemplate.current; } 
	 EOF 
;

// Rule Template
ruleTemplate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='template' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTemplateAccess().getTemplateKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTemplateAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTemplateAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getIntegerLiteralINTEGER_LITERALParserRuleCall_2_1_0()); 
	    }
		lv_integerLiteral_3_0=ruleINTEGER_LITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		set(
       			$current, 
       			"integerLiteral",
        		lv_integerLiteral_3_0, 
        		"INTEGER_LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTemplateAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getParameterListParameterListParserRuleCall_4_0()); 
	    }
		lv_parameterList_5_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		set(
       			$current, 
       			"parameterList",
        		lv_parameterList_5_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTemplateAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_7='extends' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTemplateAccess().getExtendsKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getTemplateAccess().getSuperTemplateTemplateCrossReference_6_1_0()); 
	}

)
))?	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTemplateAccess().getLeftCurlyBracketKeyword_7());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getTemplateAnnotationAnnotationParserRuleCall_8_0_0()); 
	    }
		lv_templateAnnotation_10_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"templateAnnotation",
        		lv_templateAnnotation_10_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getTemplateConstituentTemplateConstituentParserRuleCall_8_1_0()); 
	    }
		lv_templateConstituent_11_0=ruleTemplateConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"templateConstituent",
        		lv_templateConstituent_11_0, 
        		"TemplateConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTemplateAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleTemplateConstituent
entryRuleTemplateConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateConstituentRule()); }
	 iv_ruleTemplateConstituent=ruleTemplateConstituent 
	 { $current=$iv_ruleTemplateConstituent.current; } 
	 EOF 
;

// Rule TemplateConstituent
ruleTemplateConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateConstituentAccess().getTemplateParserRuleCall_0()); 
    }
    this_Template_0=ruleTemplate
    { 
        $current = $this_Template_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateConstituentAccess().getProvidesParserRuleCall_1()); 
    }
    this_Provides_1=ruleProvides
    { 
        $current = $this_Provides_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateConstituentAccess().getRequiresParserRuleCall_2()); 
    }
    this_Requires_2=ruleRequires
    { 
        $current = $this_Requires_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateConstituentAccess().getPropertyParserRuleCall_3()); 
    }
    this_Property_3=ruleProperty
    { 
        $current = $this_Property_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateConstituentAccess().getCheckParserRuleCall_4()); 
    }
    this_Check_4=ruleCheck
    { 
        $current = $this_Check_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProvides
entryRuleProvides returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProvidesRule()); }
	 iv_ruleProvides=ruleProvides 
	 { $current=$iv_ruleProvides.current; } 
	 EOF 
;

// Rule Provides
ruleProvides returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='provides' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProvidesAccess().getProvidesKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProvidesAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProvidesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProvidesAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProvidesAccess().getValueINTEGER_LITERALParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleINTEGER_LITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProvidesRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INTEGER_LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_type_4_0=RULE_ID
		{
			newLeafNode(lv_type_4_0, grammarAccess.getProvidesAccess().getTypeIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProvidesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"ID");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProvidesAccess().getBecauseClauseBecauseClauseParserRuleCall_4_0()); 
	    }
		lv_becauseClause_5_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProvidesRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_5_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProvidesAccess().getLeftCurlyBracketKeyword_5_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProvidesAccess().getProvidesConstituentProvidesConstituentParserRuleCall_5_0_1_0()); 
	    }
		lv_providesConstituent_7_0=ruleProvidesConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProvidesRule());
	        }
       		add(
       			$current, 
       			"providesConstituent",
        		lv_providesConstituent_7_0, 
        		"ProvidesConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProvidesAccess().getRightCurlyBracketKeyword_5_0_2());
    }
)
    |	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProvidesAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleProvidesConstituent
entryRuleProvidesConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProvidesConstituentRule()); }
	 iv_ruleProvidesConstituent=ruleProvidesConstituent 
	 { $current=$iv_ruleProvidesConstituent.current; } 
	 EOF 
;

// Rule ProvidesConstituent
ruleProvidesConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProvidesConstituentAccess().getProvidesAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_providesAnnotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProvidesConstituentRule());
	        }
       		add(
       			$current, 
       			"providesAnnotation",
        		lv_providesAnnotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProvidesConstituentAccess().getCheckCheckParserRuleCall_1_0()); 
	    }
		lv_check_1_0=ruleCheck		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProvidesConstituentRule());
	        }
       		set(
       			$current, 
       			"check",
        		lv_check_1_0, 
        		"Check");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRequires
entryRuleRequires returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresRule()); }
	 iv_ruleRequires=ruleRequires 
	 { $current=$iv_ruleRequires.current; } 
	 EOF 
;

// Rule Requires
ruleRequires returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiresAccess().getRequiresKeyword_0());
    }
(
(
		lv_type_1_0=RULE_ID
		{
			newLeafNode(lv_type_1_0, grammarAccess.getRequiresAccess().getTypeIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ID");
	    }

)
)(
(
		lv_value_2_0=RULE_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getRequiresAccess().getValueIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresAccess().getBecauseRequiresClauseBecauseClauseParserRuleCall_3_0()); 
	    }
		lv_becauseRequiresClause_3_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresRule());
	        }
       		set(
       			$current, 
       			"becauseRequiresClause",
        		lv_becauseRequiresClause_3_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiresAccess().getLeftCurlyBracketKeyword_4_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresAccess().getRequiresConstituentRequiresConstituentParserRuleCall_4_0_1_0()); 
	    }
		lv_requiresConstituent_5_0=ruleRequiresConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresRule());
	        }
       		add(
       			$current, 
       			"requiresConstituent",
        		lv_requiresConstituent_5_0, 
        		"RequiresConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRequiresAccess().getRightCurlyBracketKeyword_4_0_2());
    }
)
    |	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRequiresAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleRequiresConstituent
entryRuleRequiresConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresConstituentRule()); }
	 iv_ruleRequiresConstituent=ruleRequiresConstituent 
	 { $current=$iv_ruleRequiresConstituent.current; } 
	 EOF 
;

// Rule RequiresConstituent
ruleRequiresConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresConstituentAccess().getRequiresAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_requiresAnnotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresConstituentRule());
	        }
       		add(
       			$current, 
       			"requiresAnnotation",
        		lv_requiresAnnotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresConstituentAccess().getCheckCheckParserRuleCall_1_0()); 
	    }
		lv_check_1_0=ruleCheck		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresConstituentRule());
	        }
       		set(
       			$current, 
       			"check",
        		lv_check_1_0, 
        		"Check");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='property' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getPropertyKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getBecauseClauseBecauseClauseParserRuleCall_3_0()); 
	    }
		lv_becauseClause_4_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_4_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertyAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	 iv_ruleCheck=ruleCheck 
	 { $current=$iv_ruleCheck.current; } 
	 EOF 
;

// Rule Check
ruleCheck returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='check' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getBecauseClauseBecauseClauseParserRuleCall_2_0()); 
	    }
		lv_becauseClause_2_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_2_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheckAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getBecauseClauseBecauseClauseParserRuleCall_2_0()); 
	    }
		lv_becauseClause_2_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_2_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getSystemAnnotationAnnotationParserRuleCall_4_0_0()); 
	    }
		lv_systemAnnotation_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"systemAnnotation",
        		lv_systemAnnotation_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getSystemConstituentSystemConstituentParserRuleCall_4_1_0()); 
	    }
		lv_systemConstituent_5_0=ruleSystemConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"systemConstituent",
        		lv_systemConstituent_5_0, 
        		"SystemConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSystemConstituent
entryRuleSystemConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemConstituentRule()); }
	 iv_ruleSystemConstituent=ruleSystemConstituent 
	 { $current=$iv_ruleSystemConstituent.current; } 
	 EOF 
;

// Rule SystemConstituent
ruleSystemConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSystemConstituentAccess().getCompositionalParserRuleCall_0()); 
    }
    this_Compositional_0=ruleCompositional
    { 
        $current = $this_Compositional_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSystemConstituentAccess().getCheckParserRuleCall_1()); 
    }
    this_Check_1=ruleCheck
    { 
        $current = $this_Check_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCompositional
entryRuleCompositional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositionalRule()); }
	 iv_ruleCompositional=ruleCompositional 
	 { $current=$iv_ruleCompositional.current; } 
	 EOF 
;

// Rule Compositional
ruleCompositional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompositionalAccess().getLayerParserRuleCall_0()); 
    }
    this_Layer_0=ruleLayer
    { 
        $current = $this_Layer_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompositionalAccess().getComponentParserRuleCall_1()); 
    }
    this_Component_1=ruleComponent
    { 
        $current = $this_Component_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompositionalAccess().getConnectorParserRuleCall_2()); 
    }
    this_Connector_2=ruleConnector
    { 
        $current = $this_Connector_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompositionalAccess().getLinkParserRuleCall_3()); 
    }
    this_Link_3=ruleLink
    { 
        $current = $this_Link_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLayer
entryRuleLayer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLayerRule()); }
	 iv_ruleLayer=ruleLayer 
	 { $current=$iv_ruleLayer.current; } 
	 EOF 
;

// Rule Layer
ruleLayer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='layer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLayerAccess().getLayerKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLayerAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLayerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='over' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLayerAccess().getOverKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLayerRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getLayerAccess().getSuperLayerLayerCrossReference_2_1_0()); 
	}

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLayerAccess().getCommaKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLayerRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getLayerAccess().getSuperLayerLayerCrossReference_2_2_1_0()); 
	}

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLayerAccess().getBecauseClauseBecauseClauseParserRuleCall_3_0()); 
	    }
		lv_becauseClause_6_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLayerRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_6_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLayerAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLayerAccess().getLayerAnnotationAnnotationParserRuleCall_5_0_0()); 
	    }
		lv_layerAnnotation_8_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLayerRule());
	        }
       		add(
       			$current, 
       			"layerAnnotation",
        		lv_layerAnnotation_8_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLayerAccess().getLayerConstituentLayerConstituentParserRuleCall_5_1_0()); 
	    }
		lv_layerConstituent_9_0=ruleLayerConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLayerRule());
	        }
       		add(
       			$current, 
       			"layerConstituent",
        		lv_layerConstituent_9_0, 
        		"LayerConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLayerAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleLayerConstituent
entryRuleLayerConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLayerConstituentRule()); }
	 iv_ruleLayerConstituent=ruleLayerConstituent 
	 { $current=$iv_ruleLayerConstituent.current; } 
	 EOF 
;

// Rule LayerConstituent
ruleLayerConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLayerConstituentAccess().getCompositionalParserRuleCall_0()); 
    }
    this_Compositional_0=ruleCompositional
    { 
        $current = $this_Compositional_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLayerConstituentAccess().getCheckParserRuleCall_1()); 
    }
    this_Check_1=ruleCheck
    { 
        $current = $this_Check_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getEqualsSignKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getComponentAccess().getValueTemplateCrossReference_3_0()); 
	}

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getArgumentListArgumentListParserRuleCall_5_0()); 
	    }
		lv_argumentList_5_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"argumentList",
        		lv_argumentList_5_0, 
        		"ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComponentAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getBecauseClauseBecauseClauseParserRuleCall_7_0()); 
	    }
		lv_becauseClause_7_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_7_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_8_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getAnnotationAnnotationParserRuleCall_8_0_1_0_0()); 
	    }
		lv_annotation_9_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_9_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0()); 
	    }
		lv_instantiableConstituent_10_0=ruleInstantiableConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"instantiableConstituent",
        		lv_instantiableConstituent_10_0, 
        		"InstantiableConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_8_0_2());
    }
)
    |	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getComponentAccess().getSemicolonKeyword_8_1());
    }
))
;





// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	 iv_ruleConnector=ruleConnector 
	 { $current=$iv_ruleConnector.current; } 
	 EOF 
;

// Rule Connector
ruleConnector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='connector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConnectorAccess().getConnectorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConnectorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConnectorAccess().getEqualsSignKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectorRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getConnectorAccess().getValueTemplateCrossReference_3_0()); 
	}

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConnectorAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getArgumentListArgumentListParserRuleCall_5_0()); 
	    }
		lv_argumentList_5_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		set(
       			$current, 
       			"argumentList",
        		lv_argumentList_5_0, 
        		"ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConnectorAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getBecauseClauseBecauseClauseParserRuleCall_7_0()); 
	    }
		lv_becauseClause_7_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_7_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConnectorAccess().getLeftCurlyBracketKeyword_8_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getAnnotationAnnotationParserRuleCall_8_0_1_0_0()); 
	    }
		lv_annotation_9_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_9_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getInstantiableConstituentInstantiableConstituentParserRuleCall_8_0_1_1_0()); 
	    }
		lv_instantiableConstituent_10_0=ruleInstantiableConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		add(
       			$current, 
       			"instantiableConstituent",
        		lv_instantiableConstituent_10_0, 
        		"InstantiableConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConnectorAccess().getRightCurlyBracketKeyword_8_0_2());
    }
)
    |	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getConnectorAccess().getSemicolonKeyword_8_1());
    }
))
;





// Entry rule entryRuleInstantiableConstituent
entryRuleInstantiableConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstantiableConstituentRule()); }
	 iv_ruleInstantiableConstituent=ruleInstantiableConstituent 
	 { $current=$iv_ruleInstantiableConstituent.current; } 
	 EOF 
;

// Rule InstantiableConstituent
ruleInstantiableConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstantiableConstituentAccess().getCompositionalParserRuleCall_0()); 
    }
    this_Compositional_0=ruleCompositional
    { 
        $current = $this_Compositional_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstantiableConstituentAccess().getCheckParserRuleCall_1()); 
    }
    this_Check_1=ruleCheck
    { 
        $current = $this_Check_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='link' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkAccess().getLinkKeyword_0());
    }
(
(
		lv_type_1_0=RULE_ID
		{
			newLeafNode(lv_type_1_0, grammarAccess.getLinkAccess().getTypeIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ID");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getLinkConsumerLinkConsumerExpressionParserRuleCall_2_0()); 
	    }
		lv_linkConsumer_2_0=ruleLinkConsumerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkRule());
	        }
       		set(
       			$current, 
       			"linkConsumer",
        		lv_linkConsumer_2_0, 
        		"LinkConsumerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLinkAccess().getToKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getLinkProvidersLinkProvidersListParserRuleCall_4_0()); 
	    }
		lv_linkProviders_4_0=ruleLinkProvidersList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkRule());
	        }
       		set(
       			$current, 
       			"linkProviders",
        		lv_linkProviders_4_0, 
        		"LinkProvidersList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getBecauseClauseBecauseClauseParserRuleCall_5_0()); 
	    }
		lv_becauseClause_5_0=ruleBecauseClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkRule());
	        }
       		set(
       			$current, 
       			"becauseClause",
        		lv_becauseClause_5_0, 
        		"BecauseClause");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinkAccess().getLeftCurlyBracketKeyword_6_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getLinkConstituentLinkConstituentParserRuleCall_6_0_1_0()); 
	    }
		lv_linkConstituent_7_0=ruleLinkConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkRule());
	        }
       		add(
       			$current, 
       			"linkConstituent",
        		lv_linkConstituent_7_0, 
        		"LinkConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLinkAccess().getRightCurlyBracketKeyword_6_0_2());
    }
)
    |	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLinkAccess().getSemicolonKeyword_6_1());
    }
))
;





// Entry rule entryRuleLinkConstituent
entryRuleLinkConstituent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkConstituentRule()); }
	 iv_ruleLinkConstituent=ruleLinkConstituent 
	 { $current=$iv_ruleLinkConstituent.current; } 
	 EOF 
;

// Rule LinkConstituent
ruleLinkConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkConstituentAccess().getAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkConstituentRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkConstituentAccess().getCheckCheckParserRuleCall_1_0()); 
	    }
		lv_check_1_0=ruleCheck		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkConstituentRule());
	        }
       		set(
       			$current, 
       			"check",
        		lv_check_1_0, 
        		"Check");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLinkConsumerExpression
entryRuleLinkConsumerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkConsumerExpressionRule()); }
	 iv_ruleLinkConsumerExpression=ruleLinkConsumerExpression 
	 { $current=$iv_ruleLinkConsumerExpression.current; } 
	 EOF 
;

// Rule LinkConsumerExpression
ruleLinkConsumerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkConsumerExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getLinkConsumerExpressionAccess().getConsumerLinkConsumerPartCrossReference_0_0()); 
	}

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkConsumerExpressionAccess().getFullStopKeyword_1_0());
    }
(
(
(
		lv_rightConsumer_2_1=RULE_ID
		{
			newLeafNode(lv_rightConsumer_2_1, grammarAccess.getLinkConsumerExpressionAccess().getRightConsumerIDTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkConsumerExpressionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"rightConsumer",
        		lv_rightConsumer_2_1, 
        		"ID");
	    }

    |		lv_rightConsumer_2_2=	'out' 
    {
        newLeafNode(lv_rightConsumer_2_2, grammarAccess.getLinkConsumerExpressionAccess().getRightConsumerOutKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkConsumerExpressionRule());
	        }
       		addWithLastConsumed($current, "rightConsumer", lv_rightConsumer_2_2, null);
	    }

)

)
))*)
;







// Entry rule entryRuleLinkProvidersList
entryRuleLinkProvidersList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkProvidersListRule()); }
	 iv_ruleLinkProvidersList=ruleLinkProvidersList 
	 { $current=$iv_ruleLinkProvidersList.current; } 
	 EOF 
;

// Rule LinkProvidersList
ruleLinkProvidersList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkProvidersListAccess().getProvidersLinkProvidersParserRuleCall_0_0()); 
	    }
		lv_providers_0_0=ruleLinkProviders		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkProvidersListRule());
	        }
       		add(
       			$current, 
       			"providers",
        		lv_providers_0_0, 
        		"LinkProviders");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkProvidersListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkProvidersListAccess().getProvidersLinkProvidersParserRuleCall_1_1_0()); 
	    }
		lv_providers_2_0=ruleLinkProviders		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkProvidersListRule());
	        }
       		add(
       			$current, 
       			"providers",
        		lv_providers_2_0, 
        		"LinkProviders");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLinkProviders
entryRuleLinkProviders returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkProvidersRule()); }
	 iv_ruleLinkProviders=ruleLinkProviders 
	 { $current=$iv_ruleLinkProviders.current; } 
	 EOF 
;

// Rule LinkProviders
ruleLinkProviders returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkProvidersRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getLinkProvidersAccess().getProviderLinkProviderPartCrossReference_0_0()); 
	}

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkProvidersAccess().getFullStopKeyword_1_0());
    }
(
(
(
		lv_rightProvider_2_1=RULE_ID
		{
			newLeafNode(lv_rightProvider_2_1, grammarAccess.getLinkProvidersAccess().getRightProviderIDTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkProvidersRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"rightProvider",
        		lv_rightProvider_2_1, 
        		"ID");
	    }

    |		lv_rightProvider_2_2=	'in' 
    {
        newLeafNode(lv_rightProvider_2_2, grammarAccess.getLinkProvidersAccess().getRightProviderInKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkProvidersRule());
	        }
       		addWithLastConsumed($current, "rightProvider", lv_rightProvider_2_2, null);
	    }

)

)
))*)
;







// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		lv_annotation_1_0=RULE_ID
		{
			newLeafNode(lv_annotation_1_0, grammarAccess.getAnnotationAccess().getAnnotationIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"annotation",
        		lv_annotation_1_0, 
        		"ID");
	    }

)
)?	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getValueNameValuesParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleNameValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"NameValues");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleNameValue
entryRuleNameValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameValueRule()); }
	 iv_ruleNameValue=ruleNameValue 
	 { $current=$iv_ruleNameValue.current; } 
	 EOF 
;

// Rule NameValue
ruleNameValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_namePair_0_0=RULE_ID
		{
			newLeafNode(lv_namePair_0_0, grammarAccess.getNameValueAccess().getNamePairIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"namePair",
        		lv_namePair_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNameValueAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNameValueAccess().getValuePairExpressionParserRuleCall_2_0()); 
	    }
		lv_valuePair_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameValueRule());
	        }
       		set(
       			$current, 
       			"valuePair",
        		lv_valuePair_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNameValues
entryRuleNameValues returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameValuesRule()); }
	 iv_ruleNameValues=ruleNameValues 
	 { $current=$iv_ruleNameValues.current; } 
	 EOF 
;

// Rule NameValues
ruleNameValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNameValuesAccess().getMembersNameValueParserRuleCall_0_0()); 
	    }
		lv_members_0_0=ruleNameValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameValuesRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_0_0, 
        		"NameValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNameValuesAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNameValuesAccess().getMembersNameValueParserRuleCall_1_1_0()); 
	    }
		lv_members_2_0=ruleNameValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameValuesRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_0, 
        		"NameValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSupportsClause
entryRuleSupportsClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSupportsClauseRule()); }
	 iv_ruleSupportsClause=ruleSupportsClause 
	 { $current=$iv_ruleSupportsClause.current; } 
	 EOF 
;

// Rule SupportsClause
ruleSupportsClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='supports' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSupportsClauseAccess().getSupportsKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSupportsClauseRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSupportsClauseAccess().getValueRequirementOrQualityCrossReference_1_0()); 
	}

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSupportsClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSupportsClauseRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSupportsClauseAccess().getValueRequirementOrQualityCrossReference_2_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleInhibitsClause
entryRuleInhibitsClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInhibitsClauseRule()); }
	 iv_ruleInhibitsClause=ruleInhibitsClause 
	 { $current=$iv_ruleInhibitsClause.current; } 
	 EOF 
;

// Rule InhibitsClause
ruleInhibitsClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inhibits' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInhibitsClauseAccess().getInhibitsKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInhibitsClauseRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getInhibitsClauseAccess().getValueRequirementOrQualityCrossReference_1_0()); 
	}

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInhibitsClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInhibitsClauseRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getInhibitsClauseAccess().getValueRequirementOrQualityCrossReference_2_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleBecauseClause
entryRuleBecauseClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBecauseClauseRule()); }
	 iv_ruleBecauseClause=ruleBecauseClause 
	 { $current=$iv_ruleBecauseClause.current; } 
	 EOF 
;

// Rule BecauseClause
ruleBecauseClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='because' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBecauseClauseAccess().getBecauseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBecauseClauseAccess().getMembersBecauseCausalcontextParserRuleCall_1_0()); 
	    }
		lv_members_1_0=ruleBecauseCausalcontext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBecauseClauseRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_1_0, 
        		"BecauseCausalcontext");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBecauseClauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBecauseClauseAccess().getMembersBecauseCausalcontextParserRuleCall_2_1_0()); 
	    }
		lv_members_3_0=ruleBecauseCausalcontext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBecauseClauseRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"BecauseCausalcontext");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBecauseCausalcontext
entryRuleBecauseCausalcontext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBecauseCausalcontextRule()); }
	 iv_ruleBecauseCausalcontext=ruleBecauseCausalcontext 
	 { $current=$iv_ruleBecauseCausalcontext.current; } 
	 EOF 
;

// Rule BecauseCausalcontext
ruleBecauseCausalcontext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBecauseCausalcontextRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBecauseCausalcontextAccess().getValueRationaleCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBecauseCausalcontextAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBecauseCausalcontextAccess().getArgumentListArgumentListParserRuleCall_2_0()); 
	    }
		lv_argumentList_2_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBecauseCausalcontextRule());
	        }
       		set(
       			$current, 
       			"argumentList",
        		lv_argumentList_2_0, 
        		"ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBecauseCausalcontextAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_names_0_0=RULE_ID
		{
			newLeafNode(lv_names_0_0, grammarAccess.getParameterListAccess().getNamesIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterListRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		lv_names_2_0=RULE_ID
		{
			newLeafNode(lv_names_2_0, grammarAccess.getParameterListAccess().getNamesIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterListRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	 iv_ruleArgumentList=ruleArgumentList 
	 { $current=$iv_ruleArgumentList.current; } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getMembersMemberExpressionParserRuleCall_0_0()); 
	    }
		lv_members_0_0=ruleMemberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_0_0, 
        		"MemberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getMembersMemberExpressionParserRuleCall_1_1_0()); 
	    }
		lv_members_2_0=ruleMemberExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_0, 
        		"MemberExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSubsetofExpressionParserRuleCall()); 
    }
    this_SubsetofExpression_0=ruleSubsetofExpression
    { 
        $current = $this_SubsetofExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSubsetofExpression
entryRuleSubsetofExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubsetofExpressionRule()); }
	 iv_ruleSubsetofExpression=ruleSubsetofExpression 
	 { $current=$iv_ruleSubsetofExpression.current; } 
	 EOF 
;

// Rule SubsetofExpression
ruleSubsetofExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSubsetofExpressionAccess().getLogicalOrLogicalOrExpressionParserRuleCall_0_0()); 
	    }
		lv_logicalOr_0_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubsetofExpressionRule());
	        }
       		add(
       			$current, 
       			"logicalOr",
        		lv_logicalOr_0_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='subsetof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubsetofExpressionAccess().getSubsetofKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubsetofExpressionAccess().getLogicalOrLogicalOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_logicalOr_2_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubsetofExpressionRule());
	        }
       		add(
       			$current, 
       			"logicalOr",
        		lv_logicalOr_2_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndLogicalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_logicalAnd_0_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"logicalAnd",
        		lv_logicalAnd_0_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndLogicalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_logicalAnd_2_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"logicalAnd",
        		lv_logicalAnd_2_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getBitwiseOrBitwiseOrExpressionParserRuleCall_0_0()); 
	    }
		lv_bitwiseOr_0_0=ruleBitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"bitwiseOr",
        		lv_bitwiseOr_0_0, 
        		"BitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getBitwiseOrBitwiseOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_bitwiseOr_2_0=ruleBitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"bitwiseOr",
        		lv_bitwiseOr_2_0, 
        		"BitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOrExpressionRule()); }
	 iv_ruleBitwiseOrExpression=ruleBitwiseOrExpression 
	 { $current=$iv_ruleBitwiseOrExpression.current; } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseXorBitwiseXorExpressionParserRuleCall_0_0()); 
	    }
		lv_bitwiseXor_0_0=ruleBitwiseXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		add(
       			$current, 
       			"bitwiseXor",
        		lv_bitwiseXor_0_0, 
        		"BitwiseXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseXorBitwiseXorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_bitwiseXor_2_0=ruleBitwiseXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		add(
       			$current, 
       			"bitwiseXor",
        		lv_bitwiseXor_2_0, 
        		"BitwiseXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseXorExpression
entryRuleBitwiseXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseXorExpressionRule()); }
	 iv_ruleBitwiseXorExpression=ruleBitwiseXorExpression 
	 { $current=$iv_ruleBitwiseXorExpression.current; } 
	 EOF 
;

// Rule BitwiseXorExpression
ruleBitwiseXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseAndBitwiseAndExpressionParserRuleCall_0_0()); 
	    }
		lv_bitwiseAnd_0_0=ruleBitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseXorExpressionRule());
	        }
       		add(
       			$current, 
       			"bitwiseAnd",
        		lv_bitwiseAnd_0_0, 
        		"BitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseAndBitwiseAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_bitwiseAnd_2_0=ruleBitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseXorExpressionRule());
	        }
       		add(
       			$current, 
       			"bitwiseAnd",
        		lv_bitwiseAnd_2_0, 
        		"BitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseAndExpressionRule()); }
	 iv_ruleBitwiseAndExpression=ruleBitwiseAndExpression 
	 { $current=$iv_ruleBitwiseAndExpression.current; } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getEqualityEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_equality_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		add(
       			$current, 
       			"equality",
        		lv_equality_0_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getEqualityEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_equality_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		add(
       			$current, 
       			"equality",
        		lv_equality_2_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_relational_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"relational",
        		lv_relational_0_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'==' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'!=' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_relational_2_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"relational",
        		lv_relational_2_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_additive_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"additive",
        		lv_additive_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'>' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'<' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'>=' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

    |		lv_op_1_4=	'<=' 
    {
        newLeafNode(lv_op_1_4, grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_additive_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"additive",
        		lv_additive_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_multiplicative_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multiplicative",
        		lv_multiplicative_0_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'+' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'-' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_multiplicative_2_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multiplicative",
        		lv_multiplicative_2_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_unary_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"unary",
        		lv_unary_0_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'*' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'/' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'%' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		addWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_unary_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"unary",
        		lv_unary_2_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'!' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'~' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getUnaryExpressionAccess().getOpTildeKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

    |		lv_op_0_3=	'+' 
    {
        newLeafNode(lv_op_0_3, grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_3, null);
	    }

    |		lv_op_0_4=	'-' 
    {
        newLeafNode(lv_op_0_4, grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_4, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_0()); 
	    }
		lv_right_1_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMemberExpressionParserRuleCall_1()); 
    }
    this_MemberExpression_3=ruleMemberExpression
    { 
        $current = $this_MemberExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_2()); 
    }
    this_Literal_4=ruleLiteral
    { 
        $current = $this_Literal_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMemberExpression
entryRuleMemberExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberExpressionRule()); }
	 iv_ruleMemberExpression=ruleMemberExpression 
	 { $current=$iv_ruleMemberExpression.current; } 
	 EOF 
;

// Rule MemberExpression
ruleMemberExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberExpressionAccess().getMemberMemberPartParserRuleCall_0_0()); 
	    }
		lv_member_0_0=ruleMemberPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
	        }
       		add(
       			$current, 
       			"member",
        		lv_member_0_0, 
        		"MemberPart");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberExpressionAccess().getMemberMemberPartParserRuleCall_1_1_0()); 
	    }
		lv_member_2_0=ruleMemberPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
	        }
       		add(
       			$current, 
       			"member",
        		lv_member_2_0, 
        		"MemberPart");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMemberPart
entryRuleMemberPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberPartRule()); }
	 iv_ruleMemberPart=ruleMemberPart 
	 { $current=$iv_ruleMemberPart.current; } 
	 EOF 
;

// Rule MemberPart
ruleMemberPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMemberPartAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberPartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
    |((
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMemberPartAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberPartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMemberPartAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberPartAccess().getMemberArgumentsMemberArgumentsParserRuleCall_1_2_0()); 
	    }
		lv_memberArguments_3_0=ruleMemberArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberPartRule());
	        }
       		set(
       			$current, 
       			"memberArguments",
        		lv_memberArguments_3_0, 
        		"MemberArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMemberPartAccess().getRightParenthesisKeyword_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMemberPartAccess().getMemberPartAction_2_0(),
            $current);
    }
)	otherlv_6='in' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMemberPartAccess().getInKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMemberPartAccess().getMemberPartAction_3_0(),
            $current);
    }
)	otherlv_8='out' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMemberPartAccess().getOutKeyword_3_1());
    }
))
;





// Entry rule entryRuleMemberArguments
entryRuleMemberArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberArgumentsRule()); }
	 iv_ruleMemberArguments=ruleMemberArguments 
	 { $current=$iv_ruleMemberArguments.current; } 
	 EOF 
;

// Rule MemberArguments
ruleMemberArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberArgumentsAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberArgumentsRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMemberArgumentsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberArgumentsAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberArgumentsRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getSetLiteralParserRuleCall_0()); 
    }
    this_SetLiteral_0=ruleSetLiteral
    { 
        $current = $this_SetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getINTEGER_LITERALParserRuleCall_1_1()); 
    }
ruleINTEGER_LITERAL
    { 
        afterParserOrEnumRuleCall();
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_2_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getREAL_LITERALParserRuleCall_2_1()); 
    }
ruleREAL_LITERAL
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBOOLEAN_LITERALParserRuleCall_3()); 
    }
    this_BOOLEAN_LITERAL_5=ruleBOOLEAN_LITERAL
    { 
        $current = $this_BOOLEAN_LITERAL_5.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getLiteralAction_4_0(),
            $current);
    }
)this_STRING_7=RULE_STRING
    { 
    newLeafNode(this_STRING_7, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_4_1()); 
    }
))
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetLiteralAccess().getSetLiteralAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetLiteralAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getLiteralLiteralParserRuleCall_2_0_0()); 
	    }
		lv_literal_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"literal",
        		lv_literal_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getLiteralLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_literal_4_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"literal",
        		lv_literal_4_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSetLiteralAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleINTEGER_LITERAL
entryRuleINTEGER_LITERAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTEGER_LITERALRule()); } 
	 iv_ruleINTEGER_LITERAL=ruleINTEGER_LITERAL 
	 { $current=$iv_ruleINTEGER_LITERAL.current.getText(); }  
	 EOF 
;

// Rule INTEGER_LITERAL
ruleINTEGER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getINTEGER_LITERALAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleREAL_LITERAL
entryRuleREAL_LITERAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getREAL_LITERALRule()); } 
	 iv_ruleREAL_LITERAL=ruleREAL_LITERAL 
	 { $current=$iv_ruleREAL_LITERAL.current.getText(); }  
	 EOF 
;

// Rule REAL_LITERAL
ruleREAL_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_0()); 
    }
)*
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREAL_LITERALAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBOOLEAN_LITERAL
entryRuleBOOLEAN_LITERAL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEAN_LITERALRule()); }
	 iv_ruleBOOLEAN_LITERAL=ruleBOOLEAN_LITERAL 
	 { $current=$iv_ruleBOOLEAN_LITERAL.current; } 
	 EOF 
;

// Rule BOOLEAN_LITERAL
ruleBOOLEAN_LITERAL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBOOLEAN_LITERALAccess().getBOOLEAN_LITERALAction_0_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBOOLEAN_LITERALAccess().getNumberSignKeyword_0_1());
    }
this_STRING_2=RULE_STRING
    { 
    newLeafNode(this_STRING_2, grammarAccess.getBOOLEAN_LITERALAccess().getSTRINGTerminalRuleCall_0_2()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBOOLEAN_LITERALAccess().getBOOLEAN_LITERALAction_1_0(),
            $current);
    }
)	otherlv_4='true' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBOOLEAN_LITERALAccess().getTrueKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBOOLEAN_LITERALAccess().getBOOLEAN_LITERALAction_2_0(),
            $current);
    }
)	otherlv_6='false' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBOOLEAN_LITERALAccess().getFalseKeyword_2_1());
    }
))
;





RULE_KEYWORD : ('architecture'|'requirement'|'QualityAttribute'|'rationale'|'reason'|'template'|'provides'|'requires'|'property'|'check'|'system'|'layer'|'component'|'connector'|'link'|'supports'|'inhibits'|'extends'|'because'|'over'|'to'|'in'|'out'|'subsetof'|'true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


