/**
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.scoping;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody;
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationEnd;
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationStart;
import uk.ac.standrews.graspide.grasp.graspDSL.Layer;
import uk.ac.standrews.graspide.grasp.graspDSL.Template;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class GraspDSLScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Template_superTemplate(final Template template, final EReference r) {
    IScope _xblockexpression = null;
    {
      ArrayList<EObject> contents = new ArrayList<EObject>();
      EObject _eContainer = template.eContainer();
      if ((_eContainer instanceof DeclarationStart)) {
        EObject _eContainer_1 = template.eContainer();
        EList<EObject> _eContents = _eContainer_1.eContents();
        final Function1<EObject,Boolean> _function = new Function1<EObject,Boolean>() {
          public Boolean apply(final EObject content) {
            return Boolean.valueOf((content instanceof Template));
          }
        };
        Iterable<EObject> _filter = IterableExtensions.<EObject>filter(_eContents, _function);
        Iterables.<EObject>addAll(contents, _filter);
        EObject _eContainer_2 = template.eContainer();
        EObject _eContainer_3 = _eContainer_2.eContainer();
        ArchitectureBody architecture = ((ArchitectureBody) _eContainer_3);
        DeclarationEnd _declarationEnd = architecture.getDeclarationEnd();
        EList<EObject> _eContents_1 = _declarationEnd.eContents();
        final Function1<EObject,Boolean> _function_1 = new Function1<EObject,Boolean>() {
          public Boolean apply(final EObject content) {
            return Boolean.valueOf((content instanceof Template));
          }
        };
        Iterable<EObject> _filter_1 = IterableExtensions.<EObject>filter(_eContents_1, _function_1);
        Iterables.<EObject>addAll(contents, _filter_1);
      } else {
        EObject _eContainer_4 = template.eContainer();
        EList<EObject> _eContents_2 = _eContainer_4.eContents();
        final Function1<EObject,Boolean> _function_2 = new Function1<EObject,Boolean>() {
          public Boolean apply(final EObject content) {
            return Boolean.valueOf((content instanceof Template));
          }
        };
        Iterable<EObject> _filter_2 = IterableExtensions.<EObject>filter(_eContents_2, _function_2);
        Iterables.<EObject>addAll(contents, _filter_2);
      }
      _xblockexpression = Scopes.scopeFor(contents);
    }
    return _xblockexpression;
  }
  
  public IScope scope_Layer_superLayer(final Layer layer, final EReference r) {
    EObject _eContainer = layer.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    final Function1<EObject,Boolean> _function = new Function1<EObject,Boolean>() {
      public Boolean apply(final EObject content) {
        return Boolean.valueOf((content instanceof Layer));
      }
    };
    Iterable<EObject> _filter = IterableExtensions.<EObject>filter(_eContents, _function);
    return Scopes.scopeFor(_filter);
  }
}
