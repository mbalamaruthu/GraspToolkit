/**
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import uk.ac.standrews.graspide.grasp.generator.LinksGenerator;
import uk.ac.standrews.graspide.grasp.generator.SystemsGenerator;
import uk.ac.standrews.graspide.grasp.graspDSL.Architecture;
import uk.ac.standrews.graspide.grasp.graspDSL.GraspSpecification;

/**
 * Extension point that generates code from the model files.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GraspDSLGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _get = _contents.get(0);
    GraspSpecification specification = ((GraspSpecification) _get);
    boolean _equals = Objects.equal(specification, null);
    if (_equals) {
      return;
    }
    LinksGenerator linksGenerator = new LinksGenerator(fsa);
    SystemsGenerator systemElementGenerator = new SystemsGenerator(fsa);
    Architecture _architecture = specification.getArchitecture();
    systemElementGenerator.processSystemElements(_architecture);
    Architecture _architecture_1 = specification.getArchitecture();
    linksGenerator.processLinks(_architecture_1);
  }
}
