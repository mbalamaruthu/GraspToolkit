/**
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.validation;

import java.util.HashSet;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import uk.ac.standrews.graspide.grasp.graspDSL.Architecture;
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody;
import uk.ac.standrews.graspide.grasp.graspDSL.Component;
import uk.ac.standrews.graspide.grasp.graspDSL.Connector;
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationEnd;
import uk.ac.standrews.graspide.grasp.graspDSL.InhibitsClause;
import uk.ac.standrews.graspide.grasp.graspDSL.Layer;
import uk.ac.standrews.graspide.grasp.graspDSL.Link;
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute;
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale;
import uk.ac.standrews.graspide.grasp.graspDSL.Reason;
import uk.ac.standrews.graspide.grasp.graspDSL.SupportsClause;
import uk.ac.standrews.graspide.grasp.graspDSL.Template;
import uk.ac.standrews.graspide.grasp.validation.AbstractGraspDSLValidator;
import uk.ac.standrews.graspide.grasp.validation.ComponentValidator;
import uk.ac.standrews.graspide.grasp.validation.ConnectorValidator;
import uk.ac.standrews.graspide.grasp.validation.GraspValidationPreferences;
import uk.ac.standrews.graspide.grasp.validation.LayerValidator;
import uk.ac.standrews.graspide.grasp.validation.LinkValidator;
import uk.ac.standrews.graspide.grasp.validation.QualityRequirementValidator;
import uk.ac.standrews.graspide.grasp.validation.RationaleValidator;
import uk.ac.standrews.graspide.grasp.validation.ReasonValidator;
import uk.ac.standrews.graspide.grasp.validation.RequiresProvidesValidator;
import uk.ac.standrews.graspide.grasp.validation.TemplateValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class GraspDSLValidator extends AbstractGraspDSLValidator {
  public final static String INVALID_NAME = "invalidName";
  
  private final Set<String> rationaleSet = new HashSet<String>();
  
  private final Set<String> templateSet = new HashSet<String>();
  
  private final Set<String> qualityReqSet = new HashSet<String>();
  
  private LayerValidator layerValidator;
  
  private RationaleValidator rationaleValidator;
  
  private ReasonValidator reasonValidator;
  
  private QualityRequirementValidator qualityValidator;
  
  private TemplateValidator templateValidator;
  
  private RequiresProvidesValidator requiresValidator;
  
  private LinkValidator linkValidator;
  
  private ComponentValidator componentValidator;
  
  private ConnectorValidator connectorValidator;
  
  private GraspValidationPreferences preference;
  
  private long startTime = 0;
  
  private long endTime = 0;
  
  public GraspDSLValidator() {
    LayerValidator _layerValidator = new LayerValidator(this);
    this.layerValidator = _layerValidator;
    RationaleValidator _rationaleValidator = new RationaleValidator(this);
    this.rationaleValidator = _rationaleValidator;
    ReasonValidator _reasonValidator = new ReasonValidator(this);
    this.reasonValidator = _reasonValidator;
    QualityRequirementValidator _qualityRequirementValidator = new QualityRequirementValidator(this);
    this.qualityValidator = _qualityRequirementValidator;
    TemplateValidator _templateValidator = new TemplateValidator(this);
    this.templateValidator = _templateValidator;
    RequiresProvidesValidator _requiresProvidesValidator = new RequiresProvidesValidator(this);
    this.requiresValidator = _requiresProvidesValidator;
    LinkValidator _linkValidator = new LinkValidator(this);
    this.linkValidator = _linkValidator;
    ComponentValidator _componentValidator = new ComponentValidator(this);
    this.componentValidator = _componentValidator;
    ConnectorValidator _connectorValidator = new ConnectorValidator(this);
    this.connectorValidator = _connectorValidator;
    GraspValidationPreferences _graspValidationPreferences = new GraspValidationPreferences();
    this.preference = _graspValidationPreferences;
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateComponentReferences(final uk.ac.standrews.graspide.grasp.graspDSL.System system) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateComponentReferences");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.componentValidator.validateComponentReferences(system);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateConnectorReferences(final uk.ac.standrews.graspide.grasp.graspDSL.System system) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateConnectorReferences");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.connectorValidator.validateConnectorReferences(system);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateLinkForInterfaceMatch(final Link link) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateLinkForInterfaceMatch");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.linkValidator.validateLinkForInterfaceMatch(link);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateLinkForLayerConstraints(final Link link) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateLinkForLayerConstraints");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.linkValidator.validateLinkForLayerConstraints(link);
    }
  }
  
  @Check
  public void validateLinkForLayerConfiguration(final Link link) {
    this.linkValidator.validateLinkForLayerConfiguration(link);
  }
  
  @Check
  public Set<String> validateLinkForLayerAutoCompletion(final Link link) {
    return this.linkValidator.validateLinkLayerAutoCompletion(link);
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateRequiresAndProvides(final ArchitectureBody architectureBody) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateRequiresAndProvides");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.requiresValidator.validateRequiresAndProvides(architectureBody);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateRequires(final uk.ac.standrews.graspide.grasp.graspDSL.System system) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateRequires");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.requiresValidator.validateRequires(system);
    }
  }
  
  @Check
  public void validateSelfReferenceTemplates(final Template template) {
    boolean _and = false;
    boolean _isDefaultValidationsEnabled = this.preference.isDefaultValidationsEnabled();
    if (!_isDefaultValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateSelfReferenceTemplates");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.templateValidator.validateSelfReferenceTemplates(template);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateTemplatesForCycle(final Template template) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateTemplatesForCycle");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.templateValidator.validateTemplatesForCycle(template);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void addTemplateUsagesInComponents(final Component component) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateTemplateUsage");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.templateValidator.addTemplateUsagesInComponents(component, this.templateSet);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void addTemplateUsagesInConnectors(final Connector connector) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateTemplateUsage");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.templateValidator.addTemplateUsagesInConnectors(connector, this.templateSet);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateTemplateUsage(final DeclarationEnd declarationEnd) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateTemplateUsage");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.templateValidator.validateTemplateUsage(declarationEnd, this.templateSet);
    }
    this.templateSet.clear();
  }
  
  @Check(CheckType.EXPENSIVE)
  public void addReqorQattributeUsages(final Architecture architecture) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateQualityReqUsages");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.qualityValidator.addReqorQattributeUsages(architecture, this.qualityReqSet);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateQualityReqUsage(final DeclarationEnd declarationEnd) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateQualityReqUsages");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.qualityValidator.validateQualityReqUsages(declarationEnd, this.qualityReqSet);
    }
    this.qualityReqSet.clear();
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateQattributeSupport(final Qattribute qattribute) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateQattributeSupport");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.qualityValidator.validateQattributeSupport(qattribute);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateDuplicateRequirementsSupport(final SupportsClause supportClause) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateDuplicateRequirementsSupport");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.qualityValidator.validateDuplicateRequirementsSupport(supportClause);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateDuplicateRequirementsInhibits(final InhibitsClause inhibitClause) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateDuplicateRequirementsInhibits");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.qualityValidator.validateDuplicateRequirementsInhibits(inhibitClause);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateReason(final Reason reason) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateReasons");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.reasonValidator.validateReasons(reason);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void addRationaleUsages(final Architecture architecture) {
    long _currentTimeMillis = System.currentTimeMillis();
    this.startTime = _currentTimeMillis;
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateRationaleUsages");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.rationaleValidator.addRationaleUsage(architecture, this.rationaleSet);
    }
  }
  
  @Check
  public void validateSelfReferenceRationales(final Rationale rationale) {
    boolean _and = false;
    boolean _isDefaultValidationsEnabled = this.preference.isDefaultValidationsEnabled();
    if (!_isDefaultValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateSelfReferenceRationale");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.rationaleValidator.validateSelfReferenceRationale(rationale);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateEmptyRationales(final Rationale rationale) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateEmptyRationales");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.rationaleValidator.validateEmptyRationales(rationale);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateRationaleUsage(final DeclarationEnd declarationEnd) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateRationaleUsages");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.rationaleValidator.validateRationaleUsages(declarationEnd, this.rationaleSet);
    }
    long _currentTimeMillis = System.currentTimeMillis();
    this.endTime = _currentTimeMillis;
    System.out.println(("Validations Execution Time " + Long.valueOf((this.endTime - this.startTime))));
    this.rationaleSet.clear();
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateRationaleForCycles(final Rationale rationale) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validatorRationaleForcycle");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.rationaleValidator.validatorRationaleForcycle(rationale);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateLayerReference(final Layer layer) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateLayerReference");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.layerValidator.validateLayerReference(layer);
    }
  }
  
  @Check
  public void validateSelfReferenceLayers(final Layer layer) {
    boolean _and = false;
    boolean _isDefaultValidationsEnabled = this.preference.isDefaultValidationsEnabled();
    if (!_isDefaultValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateSelfReferenceLayers");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.layerValidator.validateSelfReferenceLayers(layer);
    }
  }
  
  @Check(CheckType.EXPENSIVE)
  public void validateLayersForCycles(final Layer layer) {
    boolean _and = false;
    boolean _isExpensiveValidationsEnabled = this.preference.isExpensiveValidationsEnabled();
    if (!_isExpensiveValidationsEnabled) {
      _and = false;
    } else {
      boolean _isValidationEnabled = this.preference.isValidationEnabled("validateLayersForCycles");
      _and = _isValidationEnabled;
    }
    if (_and) {
      this.layerValidator.validateLayersForCycles(layer);
    }
  }
  
  public void warning(final String message, final EObject source, final EStructuralFeature feature) {
    super.warning(message, source, feature);
  }
  
  public void error(final String message, final EStructuralFeature feature) {
    super.error(message, feature);
  }
  
  public void error(final String message, final EObject source, final EStructuralFeature feature) {
    super.error(message, source, feature);
  }
  
  public void info(final String message, final EObject source, final EStructuralFeature feature) {
    super.info(message, source, feature);
  }
}
