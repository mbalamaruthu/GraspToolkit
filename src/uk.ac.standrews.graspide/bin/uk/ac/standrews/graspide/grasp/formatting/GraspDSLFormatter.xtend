/*
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.formatting

import javax.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import uk.ac.standrews.graspide.grasp.services.GraspDSLGrammarAccess

/**
 * This extension point contains custom formatting description.
 *
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 *
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class GraspDSLFormatter extends AbstractDeclarativeFormatter {

    @Inject extension GraspDSLGrammarAccess g

    override protected void configureFormatting(FormattingConfig formatConfig) {

        formatConfig.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
        formatConfig.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
        formatConfig.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
        for (brackets : g.findKeywordPairs("{", "}")) {

            formatConfig.setSpace(" ").before(brackets.getFirst());

            formatConfig.setLinewrap(1).after(brackets.getFirst());
            formatConfig.setIndentation(brackets.getFirst(), brackets.getSecond());

            formatConfig.setLinewrap(1).before(brackets.getSecond());
            formatConfig.setLinewrap(2).after(brackets.getSecond());
        }

        val keywords = g.findKeywords('@', 'architecture', 'requirement', 'quality_attribute', 'rationale', 'reason',
            'template', 'provides', 'requires', 'property', 'check', 'system', 'layer', 'component', 'connector', 'link')
        for (keyword : keywords) {
            formatConfig.setLinewrap(1).before(keyword);
        }

        val noSpaceBeforeKeywords = g.findKeywords(",", ";", ".", ")", "]", ".out", ".in")
        for (noSpaceBeforeKeyword : noSpaceBeforeKeywords) {
            formatConfig.setNoSpace().before(noSpaceBeforeKeyword);
        }

        val noSpaceAfterKeywords = g.findKeywords("@", ".", "(", "[")
        for (noSpaceAfterKeyword : noSpaceAfterKeywords) {
            formatConfig.setNoSpace().after(noSpaceAfterKeyword);
        }
        val spacedKeywords = g.findKeywords("to")
        for (spacedKeyword : spacedKeywords) {
            formatConfig.setSpace(" ").after(spacedKeyword);
            formatConfig.setSpace(" ").before(spacedKeyword);
        }

    }

}
