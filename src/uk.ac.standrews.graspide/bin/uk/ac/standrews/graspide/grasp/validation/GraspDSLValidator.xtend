/*
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.validation

import java.util.HashSet
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.CheckType
import uk.ac.standrews.graspide.grasp.graspDSL.Architecture
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody
import uk.ac.standrews.graspide.grasp.graspDSL.Component
import uk.ac.standrews.graspide.grasp.graspDSL.Connector
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationEnd
import uk.ac.standrews.graspide.grasp.graspDSL.InhibitsClause
import uk.ac.standrews.graspide.grasp.graspDSL.Layer
import uk.ac.standrews.graspide.grasp.graspDSL.Link
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale
import uk.ac.standrews.graspide.grasp.graspDSL.Reason
import uk.ac.standrews.graspide.grasp.graspDSL.SupportsClause
import uk.ac.standrews.graspide.grasp.graspDSL.System
import uk.ac.standrews.graspide.grasp.graspDSL.Template

/**
 * Custom validation rules.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class GraspDSLValidator extends AbstractGraspDSLValidator {

    public static val INVALID_NAME = 'invalidName'

    private val Set<String> rationaleSet = new HashSet<String>();
    private val Set<String> templateSet = new HashSet<String>();
    private val Set<String> qualityReqSet = new HashSet<String>();

    private LayerValidator layerValidator;
    private RationaleValidator rationaleValidator;
    private ReasonValidator reasonValidator;
    private QualityRequirementValidator qualityValidator;
    private TemplateValidator templateValidator;
    private RequiresProvidesValidator requiresValidator;
    private LinkValidator linkValidator;
    private ComponentValidator componentValidator;
    private ConnectorValidator connectorValidator;
    private GraspValidationPreferences preference;
    private var long startTime =0;
    private var long endTime = 0;

    new() {
        layerValidator = new LayerValidator(this);
        rationaleValidator = new RationaleValidator(this);
        reasonValidator = new ReasonValidator(this);
        qualityValidator = new QualityRequirementValidator(this);
        templateValidator = new TemplateValidator(this);
        requiresValidator = new RequiresProvidesValidator(this);
        linkValidator = new LinkValidator(this);
        componentValidator = new ComponentValidator(this);
        connectorValidator = new ConnectorValidator(this);
        preference = new GraspValidationPreferences();
    }

    //Component Validators
    @Check(CheckType.EXPENSIVE)
    def validateComponentReferences(System system) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateComponentReferences"))
            componentValidator.validateComponentReferences(system)
    }

    //Connector Validators
    @Check(CheckType.EXPENSIVE)
    def validateConnectorReferences(System system) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateConnectorReferences"))
            connectorValidator.validateConnectorReferences(system)
    }

    // Link Validators
    @Check(CheckType.EXPENSIVE)
    def validateLinkForInterfaceMatch(Link link) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateLinkForInterfaceMatch"))
            linkValidator.validateLinkForInterfaceMatch(link)
    }

    @Check(CheckType.EXPENSIVE)
    def validateLinkForLayerConstraints(Link link) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateLinkForLayerConstraints"))
            linkValidator.validateLinkForLayerConstraints(link);
    }

    @Check
    def validateLinkForLayerConfiguration(Link link) {
      linkValidator.validateLinkForLayerConfiguration(link)
    }

    @Check
    def validateLinkForLayerAutoCompletion(Link link) {
      linkValidator.validateLinkLayerAutoCompletion(link)
    }

    // Requires and Provides Interface Validators
    @Check(CheckType.EXPENSIVE)
    def validateRequiresAndProvides(ArchitectureBody architectureBody) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateRequiresAndProvides"))
            requiresValidator.validateRequiresAndProvides(architectureBody)
    }

     @Check(CheckType.EXPENSIVE)
    def validateRequires(System system) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateRequires"))
            requiresValidator.validateRequires(system)
    }

    // Template Validators
    @Check
    def validateSelfReferenceTemplates(Template template) {
        if (preference.isDefaultValidationsEnabled() && preference.isValidationEnabled("validateSelfReferenceTemplates"))
            templateValidator.validateSelfReferenceTemplates(template)
    }

    @Check(CheckType.EXPENSIVE)
    def validateTemplatesForCycle(Template template) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateTemplatesForCycle"))
            templateValidator.validateTemplatesForCycle(template)
    }

    @Check(CheckType.EXPENSIVE)
    def addTemplateUsagesInComponents(Component component) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateTemplateUsage"))
            templateValidator.addTemplateUsagesInComponents(component, templateSet);
    }

    @Check(CheckType.EXPENSIVE)
    def addTemplateUsagesInConnectors(Connector connector) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateTemplateUsage"))
            templateValidator.addTemplateUsagesInConnectors(connector, templateSet);
    }

    @Check(CheckType.EXPENSIVE)
    def validateTemplateUsage(DeclarationEnd declarationEnd) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateTemplateUsage"))
            templateValidator.validateTemplateUsage(declarationEnd, templateSet)

        templateSet.clear;

    }

    //Requirement and Quality Validators
    @Check(CheckType.EXPENSIVE)
    def addReqorQattributeUsages(Architecture architecture) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateQualityReqUsages"))
            qualityValidator.addReqorQattributeUsages(architecture, qualityReqSet);
    }

    @Check(CheckType.EXPENSIVE)
    def validateQualityReqUsage(DeclarationEnd declarationEnd) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateQualityReqUsages"))
            qualityValidator.validateQualityReqUsages(declarationEnd, qualityReqSet)
        qualityReqSet.clear;

    }

    @Check(CheckType.EXPENSIVE)
    def validateQattributeSupport(Qattribute qattribute) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateQattributeSupport"))
            qualityValidator.validateQattributeSupport(qattribute)
    }

    @Check(CheckType.EXPENSIVE)
    def validateDuplicateRequirementsSupport(SupportsClause supportClause) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateDuplicateRequirementsSupport"))
            qualityValidator.validateDuplicateRequirementsSupport(supportClause)
    }

    @Check(CheckType.EXPENSIVE)
    def void validateDuplicateRequirementsInhibits(InhibitsClause inhibitClause) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateDuplicateRequirementsInhibits"))
            qualityValidator.validateDuplicateRequirementsInhibits(inhibitClause)
    }

    //Reason Validators
    @Check(CheckType.EXPENSIVE)
    def validateReason(Reason reason) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateReasons"))
            reasonValidator.validateReasons(reason)
    }

    //Rationale Validators
    @Check(CheckType.EXPENSIVE)
    def addRationaleUsages(Architecture architecture) {
        startTime = java.lang.System.currentTimeMillis();
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateRationaleUsages"))
            rationaleValidator.addRationaleUsage(architecture, rationaleSet);
    }

    @Check
    def validateSelfReferenceRationales(Rationale rationale) {
        if (preference.isDefaultValidationsEnabled() && preference.isValidationEnabled("validateSelfReferenceRationale"))
            rationaleValidator.validateSelfReferenceRationale(rationale)
    }

    @Check(CheckType.EXPENSIVE)
    def validateEmptyRationales(Rationale rationale) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateEmptyRationales"))
            rationaleValidator.validateEmptyRationales(rationale)
    }

    @Check(CheckType.EXPENSIVE)
    def validateRationaleUsage(DeclarationEnd declarationEnd) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateRationaleUsages"))
            rationaleValidator.validateRationaleUsages(declarationEnd, rationaleSet)

        endTime = java.lang.System.currentTimeMillis();
        java.lang.System.out.println("Validations Execution Time "+ (endTime-startTime));
        rationaleSet.clear;
    }

    @Check(CheckType.EXPENSIVE)
    def validateRationaleForCycles(Rationale rationale) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validatorRationaleForcycle"))
            rationaleValidator.validatorRationaleForcycle(rationale)
    }

    // Layer Validators
    @Check(CheckType.EXPENSIVE)
    def void validateLayerReference(Layer layer) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateLayerReference"))
            layerValidator.validateLayerReference(layer)
    }

    @Check
    def validateSelfReferenceLayers(Layer layer) {
        if (preference.isDefaultValidationsEnabled() && preference.isValidationEnabled("validateSelfReferenceLayers"))
            layerValidator.validateSelfReferenceLayers(layer)
    }

    @Check(CheckType.EXPENSIVE)
    def void validateLayersForCycles(Layer layer) {
        if (preference.isExpensiveValidationsEnabled() && preference.isValidationEnabled("validateLayersForCycles"))
            layerValidator.validateLayersForCycles(layer)
    }


    override warning(String message, EObject source, EStructuralFeature feature) {
        super.warning(message, source, feature);
    }

    override error(String message, EStructuralFeature feature) {
        super.error(message, feature);
    }

    override error(String message, EObject source, EStructuralFeature feature) {
        super.error(message, source, feature);
    }

    override info(String message, EObject source, EStructuralFeature feature) {
        super.info(message, source, feature);
    }

}
