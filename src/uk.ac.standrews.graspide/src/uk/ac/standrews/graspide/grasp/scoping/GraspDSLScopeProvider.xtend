/*
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.scoping

import java.util.ArrayList
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationStart
import uk.ac.standrews.graspide.grasp.graspDSL.Layer
import uk.ac.standrews.graspide.grasp.graspDSL.Template

/**
 * This class contains custom scoping description.
 *
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 *
 */
class GraspDSLScopeProvider extends AbstractDeclarativeScopeProvider {

    def IScope scope_Template_superTemplate(Template template, EReference r) {

        var contents = new ArrayList();
        if (template.eContainer instanceof DeclarationStart) {
            contents.addAll(template.eContainer.eContents.filter[content|content instanceof Template]);
            var architecture = template.eContainer.eContainer as ArchitectureBody;
            contents.addAll(architecture.declarationEnd.eContents.filter[content|content instanceof Template]);

        } else {
            contents.addAll(template.eContainer.eContents.filter[content|content instanceof Template]);
        }

        Scopes::scopeFor(contents);

    }

    def IScope scope_Layer_superLayer(Layer layer, EReference r) {
        Scopes::scopeFor(layer.eContainer.eContents.filter[content|content instanceof Layer]);
    }

/*
 * Link configuration scope - issue in Xtext
 */
/* def scope_LinkConsumerPart(Link link, EReference r) {

        println("hiiiii")
        var linkConsumer = link.linkConsumer;
        if (linkConsumer instanceof LinkConsumerImpl)
            return Scopes::scopeFor(link.eContainer.eContents,getScope(link.eContainer(), r) )
        else if (linkConsumer instanceof LinkConsumersImpl) {

            var last = linkConsumer.left;
            if (last instanceof LinkConsumersImpl)
                last = last.right;

            if (last != null && last instanceof LinkConsumerImpl) {
                var lastLinkConsumer = last as LinkConsumerImpl

                var EObject consumer = null;

                // if(!lastLinkConsumer.consumer.eIsProxy)
                        consumer = lastLinkConsumer.consumer
                //else
                     // consumer =  lastLinkConsumer.eGet(GraspDSLPackage.eINSTANCE.linkConsumer_Consumer, true) as EObject

                if (consumer != null &&
                    consumer.eContents != null)
                    return Scopes::scopeFor(consumer.eContents, getScope(consumer.eContainer(),r))
            }

        }

        return IScope::NULLSCOPE
    }


    def IScope scope_ConsumerExpression_right(ConsumerExpression consumer, EReference r) {
        var parent = consumer.linkConsumerExpression;
        while(parent instanceof ConsumerExpression) {
            var child = parent as ConsumerExpression;
            parent = child.linkConsumerExpression;

        }

        var linkConsumer = parent as LinkConsumer;
        linkConsumer = linkConsumer.consumer;
        switch (linkConsumer) {
            Component: Scopes::scopeFor(linkConsumer.annotatedComponentConstituent.instantiableConstituent)
            default: IScope::NULLSCOPE
        }
    }

    def IScope scope_ProviderExpression_right(ProviderExpression consumer, EReference r) {
        var parent = consumer.linkProviderExpression as LinkProvider;
        var linkProviderPart = parent.provider;
        switch (linkProviderPart) {
            Component: Scopes::scopeFor(linkProviderPart.annotatedComponentConstituent.instantiableConstituent)
            default: IScope::NULLSCOPE
        }

    }
    var LinkConsumerPart composition = null

    var rightList = consumer.right
    var objects = new ArrayList<IEObjectDescription>()
    if (rightList == null || rightList.empty || rightList.length == 1) {

            var LinkPart parent = consumer.getConsumer()
            composition = EcoreUtil2.getContainerOfType(parent, LinkPart)



        } else {

            var parent = rightList.get(rightList.length - 1)
            composition = EcoreUtil2.getContainerOfType(parent, LinkConsumerPart)
        }
         if(composition instanceof Component) {
            var Component comp = composition as Component;
            for(content:comp.eContents) {
                var componentContent = content as Component
                val String name = componentContent?.name ?: null;
                objects.add(EObjectDescription.create( name, content))
            }

         }
//         return composition.delegateGetScope(r));
        return new SimpleScope(IScope.NULLSCOPE, objects);
   }
    for (Signal s : m.getSignals()) {
        List<IEObjectDescription> objects = new ArrayList<IEObjectDescription>()
        SimpleScope(IScope.NULLSCOPE, objects)
    }*/
}
