/**
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import uk.ac.standrews.graspide.grasp.graspDSL.Annotation;
import uk.ac.standrews.graspide.grasp.graspDSL.Architecture;
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody;
import uk.ac.standrews.graspide.grasp.graspDSL.ArgumentList;
import uk.ac.standrews.graspide.grasp.graspDSL.BecauseCausalcontext;
import uk.ac.standrews.graspide.grasp.graspDSL.BecauseClause;
import uk.ac.standrews.graspide.grasp.graspDSL.Check;
import uk.ac.standrews.graspide.grasp.graspDSL.Component;
import uk.ac.standrews.graspide.grasp.graspDSL.Connector;
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationEnd;
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationStart;
import uk.ac.standrews.graspide.grasp.graspDSL.Expression;
import uk.ac.standrews.graspide.grasp.graspDSL.Layer;
import uk.ac.standrews.graspide.grasp.graspDSL.Link;
import uk.ac.standrews.graspide.grasp.graspDSL.LinkConsumerExpression;
import uk.ac.standrews.graspide.grasp.graspDSL.LinkConsumerPart;
import uk.ac.standrews.graspide.grasp.graspDSL.LinkProviderPart;
import uk.ac.standrews.graspide.grasp.graspDSL.LinkProviders;
import uk.ac.standrews.graspide.grasp.graspDSL.LinkProvidersList;
import uk.ac.standrews.graspide.grasp.graspDSL.NameValue;
import uk.ac.standrews.graspide.grasp.graspDSL.NameValues;
import uk.ac.standrews.graspide.grasp.graspDSL.Property;
import uk.ac.standrews.graspide.grasp.graspDSL.Provides;
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute;
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale;
import uk.ac.standrews.graspide.grasp.graspDSL.Reason;
import uk.ac.standrews.graspide.grasp.graspDSL.Requirement;
import uk.ac.standrews.graspide.grasp.graspDSL.RequirementOrQuality;
import uk.ac.standrews.graspide.grasp.graspDSL.Requires;
import uk.ac.standrews.graspide.grasp.graspDSL.SupportsClause;
import uk.ac.standrews.graspide.grasp.graspDSL.Template;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class GraspDSLLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public GraspDSLLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final DeclarationStart node) {
    return "Declarations";
  }
  
  public String text(final DeclarationEnd node) {
    return "Declarations";
  }
  
  public String text(final ArchitectureBody node) {
    return "ArchitectureBody";
  }
  
  public String text(final Reason node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      Expression _expression = node.getExpression();
      boolean _notEquals_1 = (!Objects.equal(_expression, null));
      _and = _notEquals_1;
    }
    if (_and) {
      _xifexpression = "";
    } else {
      String _xifexpression_1 = null;
      boolean _and_1 = false;
      boolean _and_2 = false;
      boolean _and_3 = false;
      SupportsClause _supportsClause = node.getSupportsClause();
      boolean _notEquals_2 = (!Objects.equal(_supportsClause, null));
      if (!_notEquals_2) {
        _and_3 = false;
      } else {
        SupportsClause _supportsClause_1 = node.getSupportsClause();
        EList<RequirementOrQuality> _value = _supportsClause_1.getValue();
        boolean _notEquals_3 = (!Objects.equal(_value, null));
        _and_3 = _notEquals_3;
      }
      if (!_and_3) {
        _and_2 = false;
      } else {
        SupportsClause _supportsClause_2 = node.getSupportsClause();
        EList<RequirementOrQuality> _value_1 = _supportsClause_2.getValue();
        int _size = _value_1.size();
        boolean _greaterThan = (_size > 0);
        _and_2 = _greaterThan;
      }
      if (!_and_2) {
        _and_1 = false;
      } else {
        SupportsClause _supportsClause_3 = node.getSupportsClause();
        EList<RequirementOrQuality> _value_2 = _supportsClause_3.getValue();
        RequirementOrQuality _get = _value_2.get(0);
        boolean _notEquals_4 = (!Objects.equal(_get, null));
        _and_1 = _notEquals_4;
      }
      if (_and_1) {
        String _xblockexpression = null;
        {
          SupportsClause _supportsClause_4 = node.getSupportsClause();
          EList<RequirementOrQuality> _value_3 = _supportsClause_4.getValue();
          RequirementOrQuality reqorQuality = _value_3.get(0);
          String _xifexpression_2 = null;
          boolean _and_4 = false;
          boolean _notEquals_5 = (!Objects.equal(reqorQuality, null));
          if (!_notEquals_5) {
            _and_4 = false;
          } else {
            String _name = reqorQuality.getName();
            boolean _notEquals_6 = (!Objects.equal(_name, null));
            _and_4 = _notEquals_6;
          }
          if (_and_4) {
            String _name_1 = reqorQuality.getName();
            _xifexpression_2 = (" : supports " + _name_1);
          } else {
            _xifexpression_2 = "";
          }
          _xblockexpression = _xifexpression_2;
        }
        _xifexpression_1 = _xblockexpression;
      } else {
        _xifexpression_1 = "";
      }
      _xifexpression = _xifexpression_1;
    }
    return ("Reason" + _xifexpression);
  }
  
  public String text(final Check node) {
    return "Check";
  }
  
  public String text(final Annotation node) {
    StringBuilder annotationBuilder = new StringBuilder();
    annotationBuilder.append("Annotation");
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _annotation = node.getAnnotation();
      boolean _notEquals_1 = (!Objects.equal(_annotation, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _annotation_1 = node.getAnnotation();
      String _plus = (" : " + _annotation_1);
      annotationBuilder.append(_plus);
    }
    boolean _hastAtleastOneAnnotationMember = this.hastAtleastOneAnnotationMember(node);
    if (_hastAtleastOneAnnotationMember) {
      NameValues _value = node.getValue();
      EList<NameValue> _members = _value.getMembers();
      NameValue _get = _members.get(0);
      String _namePair = _get.getNamePair();
      String otherMembers = (" - " + _namePair);
      NameValues _value_1 = node.getValue();
      EList<NameValue> _members_1 = _value_1.getMembers();
      Iterable<NameValue> _drop = IterableExtensions.<NameValue>drop(_members_1, 1);
      for (final NameValue member : _drop) {
        String _namePair_1 = member.getNamePair();
        boolean _notEquals_2 = (!Objects.equal(_namePair_1, null));
        if (_notEquals_2) {
          String _namePair_2 = member.getNamePair();
          String _plus_1 = ((otherMembers + ", ") + _namePair_2);
          otherMembers = _plus_1;
        }
      }
      annotationBuilder.append(otherMembers);
    }
    return annotationBuilder.toString();
  }
  
  public boolean hastAtleastOneAnnotationMember(final Annotation node) {
    boolean _and = false;
    boolean _and_1 = false;
    boolean _and_2 = false;
    NameValues _value = node.getValue();
    boolean _notEquals = (!Objects.equal(_value, null));
    if (!_notEquals) {
      _and_2 = false;
    } else {
      NameValues _value_1 = node.getValue();
      EList<NameValue> _members = _value_1.getMembers();
      boolean _notEquals_1 = (!Objects.equal(_members, null));
      _and_2 = _notEquals_1;
    }
    if (!_and_2) {
      _and_1 = false;
    } else {
      NameValues _value_2 = node.getValue();
      EList<NameValue> _members_1 = _value_2.getMembers();
      int _size = _members_1.size();
      boolean _greaterThan = (_size > 0);
      _and_1 = _greaterThan;
    }
    if (!_and_1) {
      _and = false;
    } else {
      NameValues _value_3 = node.getValue();
      EList<NameValue> _members_2 = _value_3.getMembers();
      NameValue _get = _members_2.get(0);
      String _namePair = _get.getNamePair();
      boolean _notEquals_2 = (!Objects.equal(_namePair, null));
      _and = _notEquals_2;
    }
    return _and;
  }
  
  public String text(final Link node) {
    String _nodeText = this.getNodeText(node);
    return ("Link" + _nodeText);
  }
  
  public String getNodeText(final Link node) {
    String nodeText = "";
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _type = node.getType();
      boolean _notEquals_1 = (!Objects.equal(_type, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _type_1 = node.getType();
      String _plus = (" : " + _type_1);
      nodeText = _plus;
    }
    LinkConsumerExpression _linkConsumer = node.getLinkConsumer();
    boolean _notEquals_2 = (!Objects.equal(_linkConsumer, null));
    if (_notEquals_2) {
      LinkConsumerExpression _linkConsumer_1 = node.getLinkConsumer();
      LinkConsumerPart consumer = _linkConsumer_1.getConsumer();
      if ((consumer instanceof Layer)) {
        String _name = ((Layer)consumer).getName();
        boolean _notEquals_3 = (!Objects.equal(_name, null));
        if (_notEquals_3) {
          String _name_1 = ((Layer)consumer).getName();
          String _plus_1 = ((nodeText + " : ") + _name_1);
          nodeText = _plus_1;
        }
      } else {
        if ((consumer instanceof Component)) {
          String _name_2 = ((Component)consumer).getName();
          boolean _notEquals_4 = (!Objects.equal(_name_2, null));
          if (_notEquals_4) {
            String _name_3 = ((Component)consumer).getName();
            String _plus_2 = ((nodeText + " : ") + _name_3);
            nodeText = _plus_2;
          }
        } else {
          if ((consumer instanceof Connector)) {
            String _name_4 = ((Connector)consumer).getName();
            boolean _notEquals_5 = (!Objects.equal(_name_4, null));
            if (_notEquals_5) {
              String _name_5 = ((Connector)consumer).getName();
              String _plus_3 = ((nodeText + " : ") + _name_5);
              nodeText = _plus_3;
            }
          } else {
            if ((consumer instanceof Requires)) {
              String _type_2 = ((Requires)consumer).getType();
              boolean _notEquals_6 = (!Objects.equal(_type_2, null));
              if (_notEquals_6) {
                String _type_3 = ((Requires)consumer).getType();
                String _plus_4 = ((nodeText + " : ") + _type_3);
                nodeText = _plus_4;
              }
            }
          }
        }
      }
    }
    boolean _hastAtleastOneProvider = this.hastAtleastOneProvider(node);
    if (_hastAtleastOneProvider) {
      LinkProvidersList _linkProviders = node.getLinkProviders();
      EList<LinkProviders> _providers = _linkProviders.getProviders();
      LinkProviders _get = _providers.get(0);
      LinkProviderPart _provider = _get.getProvider();
      String _name_6 = _provider.getName();
      String providers = (" to " + _name_6);
      LinkProvidersList _linkProviders_1 = node.getLinkProviders();
      EList<LinkProviders> _providers_1 = _linkProviders_1.getProviders();
      Iterable<LinkProviders> _drop = IterableExtensions.<LinkProviders>drop(_providers_1, 1);
      for (final LinkProviders content : _drop) {
        boolean _and_1 = false;
        LinkProviderPart _provider_1 = content.getProvider();
        boolean _notEquals_7 = (!Objects.equal(_provider_1, null));
        if (!_notEquals_7) {
          _and_1 = false;
        } else {
          LinkProviderPart _provider_2 = content.getProvider();
          String _name_7 = _provider_2.getName();
          boolean _notEquals_8 = (!Objects.equal(_name_7, null));
          _and_1 = _notEquals_8;
        }
        if (_and_1) {
          LinkProviderPart _provider_3 = content.getProvider();
          String _name_8 = _provider_3.getName();
          String _plus_5 = ((providers + ", ") + _name_8);
          providers = _plus_5;
        }
      }
      nodeText = (nodeText + providers);
    }
    return nodeText;
  }
  
  public boolean hastAtleastOneProvider(final Link node) {
    boolean _and = false;
    boolean _and_1 = false;
    boolean _and_2 = false;
    boolean _and_3 = false;
    boolean _and_4 = false;
    LinkProvidersList _linkProviders = node.getLinkProviders();
    boolean _notEquals = (!Objects.equal(_linkProviders, null));
    if (!_notEquals) {
      _and_4 = false;
    } else {
      LinkProvidersList _linkProviders_1 = node.getLinkProviders();
      EList<LinkProviders> _providers = _linkProviders_1.getProviders();
      boolean _notEquals_1 = (!Objects.equal(_providers, null));
      _and_4 = _notEquals_1;
    }
    if (!_and_4) {
      _and_3 = false;
    } else {
      LinkProvidersList _linkProviders_2 = node.getLinkProviders();
      EList<LinkProviders> _providers_1 = _linkProviders_2.getProviders();
      int _size = _providers_1.size();
      boolean _greaterThan = (_size > 0);
      _and_3 = _greaterThan;
    }
    if (!_and_3) {
      _and_2 = false;
    } else {
      LinkProvidersList _linkProviders_3 = node.getLinkProviders();
      EList<LinkProviders> _providers_2 = _linkProviders_3.getProviders();
      LinkProviders _get = _providers_2.get(0);
      boolean _notEquals_2 = (!Objects.equal(_get, null));
      _and_2 = _notEquals_2;
    }
    if (!_and_2) {
      _and_1 = false;
    } else {
      LinkProvidersList _linkProviders_4 = node.getLinkProviders();
      EList<LinkProviders> _providers_3 = _linkProviders_4.getProviders();
      LinkProviders _get_1 = _providers_3.get(0);
      LinkProviderPart _provider = _get_1.getProvider();
      boolean _notEquals_3 = (!Objects.equal(_provider, null));
      _and_1 = _notEquals_3;
    }
    if (!_and_1) {
      _and = false;
    } else {
      LinkProvidersList _linkProviders_5 = node.getLinkProviders();
      EList<LinkProviders> _providers_4 = _linkProviders_5.getProviders();
      LinkProviders _get_2 = _providers_4.get(0);
      LinkProviderPart _provider_1 = _get_2.getProvider();
      String _name = _provider_1.getName();
      boolean _notEquals_4 = (!Objects.equal(_name, null));
      _and = _notEquals_4;
    }
    return _and;
  }
  
  public String text(final Architecture node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Architecture" + _xifexpression);
  }
  
  public String text(final Requirement node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Requirement" + _xifexpression);
  }
  
  public String text(final Qattribute node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Quality Attribute" + _xifexpression);
  }
  
  public String text(final Rationale node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(null, _name));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Rationale" + _xifexpression);
  }
  
  public String text(final Template node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(null, _name));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Template" + _xifexpression);
  }
  
  public String text(final Provides node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Provides" + _xifexpression);
  }
  
  public String text(final Requires node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _type = node.getType();
      boolean _notEquals_1 = (!Objects.equal(_type, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _type_1 = node.getType();
      _xifexpression = (" : " + _type_1);
    } else {
      _xifexpression = "";
    }
    return ("Requires" + _xifexpression);
  }
  
  public String text(final uk.ac.standrews.graspide.grasp.graspDSL.System node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("System" + _xifexpression);
  }
  
  public String text(final Layer node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Layer" + _xifexpression);
  }
  
  public String text(final Component node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Component" + _xifexpression);
  }
  
  public String text(final Connector node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Connector" + _xifexpression);
  }
  
  public String text(final Property node) {
    String _xifexpression = null;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _name = node.getName();
      boolean _notEquals_1 = (!Objects.equal(_name, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name_1 = node.getName();
      _xifexpression = (" : " + _name_1);
    } else {
      _xifexpression = "";
    }
    return ("Property" + _xifexpression);
  }
  
  public String text(final ArgumentList node) {
    return "Arguments";
  }
  
  public String text(final BecauseClause node) {
    String _xifexpression = null;
    boolean _hasAtleastOneBecauseMember = this.hasAtleastOneBecauseMember(node);
    if (_hasAtleastOneBecauseMember) {
      String _xblockexpression = null;
      {
        EList<BecauseCausalcontext> _members = node.getMembers();
        BecauseCausalcontext _get = _members.get(0);
        Rationale _value = _get.getValue();
        String _name = _value.getName();
        String otherMembers = (" : " + _name);
        EList<BecauseCausalcontext> _members_1 = node.getMembers();
        Iterable<BecauseCausalcontext> _drop = IterableExtensions.<BecauseCausalcontext>drop(_members_1, 1);
        for (final BecauseCausalcontext member : _drop) {
          boolean _and = false;
          Rationale _value_1 = member.getValue();
          boolean _notEquals = (!Objects.equal(_value_1, null));
          if (!_notEquals) {
            _and = false;
          } else {
            Rationale _value_2 = member.getValue();
            String _name_1 = _value_2.getName();
            boolean _notEquals_1 = (!Objects.equal(_name_1, null));
            _and = _notEquals_1;
          }
          if (_and) {
            Rationale _value_3 = member.getValue();
            String _name_2 = _value_3.getName();
            String _plus = ((otherMembers + ", ") + _name_2);
            otherMembers = _plus;
          }
        }
        _xblockexpression = otherMembers;
      }
      _xifexpression = _xblockexpression;
    } else {
      _xifexpression = "";
    }
    return ("Rationale" + _xifexpression);
  }
  
  public boolean hasAtleastOneBecauseMember(final BecauseClause node) {
    boolean _and = false;
    boolean _and_1 = false;
    boolean _and_2 = false;
    boolean _and_3 = false;
    boolean _notEquals = (!Objects.equal(node, null));
    if (!_notEquals) {
      _and_3 = false;
    } else {
      EList<BecauseCausalcontext> _members = node.getMembers();
      boolean _notEquals_1 = (!Objects.equal(_members, null));
      _and_3 = _notEquals_1;
    }
    if (!_and_3) {
      _and_2 = false;
    } else {
      EList<BecauseCausalcontext> _members_1 = node.getMembers();
      int _size = _members_1.size();
      boolean _greaterThan = (_size > 0);
      _and_2 = _greaterThan;
    }
    if (!_and_2) {
      _and_1 = false;
    } else {
      EList<BecauseCausalcontext> _members_2 = node.getMembers();
      BecauseCausalcontext _get = _members_2.get(0);
      Rationale _value = _get.getValue();
      boolean _notEquals_2 = (!Objects.equal(_value, null));
      _and_1 = _notEquals_2;
    }
    if (!_and_1) {
      _and = false;
    } else {
      EList<BecauseCausalcontext> _members_3 = node.getMembers();
      BecauseCausalcontext _get_1 = _members_3.get(0);
      Rationale _value_1 = _get_1.getValue();
      String _name = _value_1.getName();
      boolean _notEquals_3 = (!Objects.equal(_name, null));
      _and = _notEquals_3;
    }
    return _and;
  }
}
