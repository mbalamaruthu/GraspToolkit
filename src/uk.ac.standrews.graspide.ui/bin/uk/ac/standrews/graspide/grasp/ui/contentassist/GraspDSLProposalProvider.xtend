/*
 * generated by Xtext
 */
package uk.ac.standrews.graspide.grasp.ui.contentassist

import java.util.HashSet
import java.util.List
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import uk.ac.standrews.graspide.grasp.graspDSL.Component
import uk.ac.standrews.graspide.grasp.graspDSL.Connector
import uk.ac.standrews.graspide.grasp.graspDSL.Layer
import uk.ac.standrews.graspide.grasp.graspDSL.LinkConsumerExpression
import uk.ac.standrews.graspide.grasp.graspDSL.LinkConsumerPart
import uk.ac.standrews.graspide.grasp.graspDSL.LinkProviderPart
import uk.ac.standrews.graspide.grasp.graspDSL.LinkProviders
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale
import uk.ac.standrews.graspide.grasp.graspDSL.Requires
import uk.ac.standrews.graspide.grasp.graspDSL.SupportsClause
import uk.ac.standrews.graspide.grasp.graspDSL.Template

/**
 * Content assist extension provided by Xtext
 */
class GraspDSLProposalProvider extends AbstractGraspDSLProposalProvider {

    override completeSupportsClause_Value(EObject supportClause, Assignment assignment, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {

        val support = (supportClause as SupportsClause)

        var assignmentTerminal = assignment.getTerminal() as CrossReference;
        if (support == null || ! (support.eContainer instanceof Qattribute)) {
            lookupCrossReference(assignmentTerminal, context, acceptor);
            return;
        }
        val qattribute = support.eContainer as Qattribute;

        val String currentName = qattribute.name;

        lookupCrossReference(assignmentTerminal, context, acceptor) [ description |
            !(description.EObjectOrProxy instanceof Qattribute) ||
                (description.EObjectOrProxy as Qattribute).name != currentName
        ]

    }

    override completeTemplate_SuperTemplate(EObject template, Assignment assignment, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {

        val String currentName = (template as Template).name

        var assignmentTerminal = assignment.getTerminal() as CrossReference;
        lookupCrossReference(assignmentTerminal, context, acceptor) [ description |
            (description.EObjectOrProxy as Template).name != currentName
        ]

    }

    override completeRationale_SuperRationale(EObject rationale, Assignment assignment, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {

        val String currentName = (rationale as Rationale).name

        var assignmentTerminal = assignment.getTerminal() as CrossReference;
        lookupCrossReference(assignmentTerminal, context, acceptor) [ description |
            (description.EObjectOrProxy as Rationale).name != currentName
        ]

    }

    override completeLayer_SuperLayer(EObject layerObject, Assignment assignment, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {

        val layer = layerObject as Layer

        val HashSet<String> layerSet = new HashSet<String>();
        val String currentName = layer.name
        layerSet.add(currentName)

        for(currentLayer:layer.superLayer){
            if(currentLayer != null && currentLayer.name != null)
             layerSet.add(currentLayer.name)
        }

        var assignmentTerminal = assignment.getTerminal() as CrossReference;
        lookupCrossReference(assignmentTerminal, context, acceptor) [ description |
            (!layerSet.contains((description.EObjectOrProxy as Layer).name))
        ]

    }

    def completeLinkConsumerExpression_RightConsumer(LinkConsumerExpression linkConsumer, Assignment assignment,
        ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

        if (linkConsumer.consumer == null)
            return;

        var lastComponent = linkConsumer.consumer;

        var rightList = linkConsumer.rightConsumer;

        for (right : rightList) {
            if (lastComponent == null)
                return;
            var contents = lastComponent.eContents;
            if (contents == null)
                return;
            lastComponent = findConsumerComponent(contents, right)

        }
        if (lastComponent == null || lastComponent.eContents() == null)
            return;
        addConsumerContentsToProposals(lastComponent.eContents, context, acceptor)

        var Template template = null
        if (lastComponent instanceof Component) {
            template = lastComponent.value
        } else if (lastComponent instanceof Connector) {
            template = lastComponent.value
        }

        if (template != null)
            addConsumerTemplateContentsToProposals(template, context, acceptor);
    }

    def findConsumerComponent(EList<EObject> contents, String right) {

        var LinkConsumerPart lastComponent = null

        for (content : contents) {

            if (lastComponent != null)
                return lastComponent;

            if (content instanceof LinkConsumerPart) {
                if (content instanceof Layer) {
                    if (content.name != null && content.name.equals(right)) {
                        lastComponent = content;
                    }
                } else if (content instanceof Component) {
                    if (content.name != null && content.name.equals(right)) {
                        lastComponent = content;
                    }
                } else if (content instanceof Connector) {
                    if (content.name != null && content.name.equals(right)) {
                        lastComponent = content;
                    }
                } else if (content instanceof Requires) {
                    if (content.type != null && content.type.equals(right)) {
                        lastComponent = content;
                    }
                }
            }
        }
        return lastComponent
    }

    def addConsumerTemplateContentsToProposals(Template template, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {

        var Template currentTemplate = template;
        while (currentTemplate != null) {

            addConsumerContentsToProposals(currentTemplate.eContents, context, acceptor);

            if (currentTemplate == currentTemplate.superTemplate)
                return;
            currentTemplate = currentTemplate.superTemplate;
        }
    }

    def addConsumerContentsToProposals(List<EObject> contents, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {
        var ICompletionProposal completionProposal = null
        for (content : contents) {
            if (content instanceof LinkConsumerPart)
                if (content instanceof Layer)
                    completionProposal = createCompletionProposal(content.name, content.name, getImage(content), context)
                else if (content instanceof Component)
                    completionProposal = createCompletionProposal(content.name, content.name, getImage(content), context)
                else if (content instanceof Connector)
                    completionProposal = createCompletionProposal(content.name, content.name, getImage(content), context)
                else if (content instanceof Requires)
                    completionProposal = createCompletionProposal(content.type, content.type, getImage(content), context)

            acceptor.accept(completionProposal)
        }
    }

    def completeLinkProviders_RightProvider(LinkProviders linkProvider, Assignment assignment,
        ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

        if (linkProvider.provider == null)
            return;

        var lastComponent = linkProvider.provider;

        var rightList = linkProvider.rightProvider;

        for (right : rightList) {
            if (lastComponent == null)
                return;
            var contents = lastComponent.eContents;
            if (contents == null)
                return;
            lastComponent = findProviderComponent(contents, right)

        }
        if (lastComponent == null || lastComponent.eContents() == null)
            return;
        addProviderContentsToProposals(lastComponent.eContents, context, acceptor)

        var Template template = null
        if (lastComponent instanceof Component) {
            template = lastComponent.value
        } else if (lastComponent instanceof Connector) {
            template = lastComponent.value
        }

        if (template != null)
            addProviderTemplateContentsToProposals(template, context, acceptor);
    }

    def findProviderComponent(EList<EObject> contents, String right) {

        var LinkProviderPart lastComponent = null

        for (content : contents) {

            if (lastComponent != null)
                return lastComponent;

            if (content instanceof LinkProviderPart) {
                if (content.name != null && content.name.equals(right)) {

                    lastComponent = content;

                }
            }
        }
        return lastComponent
    }

    def addProviderTemplateContentsToProposals(Template template, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {

        var Template currentTemplate = template;
        while (currentTemplate != null) {

            addProviderContentsToProposals(currentTemplate.eContents, context, acceptor);

            if (currentTemplate == currentTemplate.superTemplate)
                return;
            currentTemplate = currentTemplate.superTemplate;
        }
    }

    def addProviderContentsToProposals(List<EObject> contents, ContentAssistContext context,
        ICompletionProposalAcceptor acceptor) {
        var ICompletionProposal completionProposal = null
        for (content : contents) {
            if (content instanceof LinkProviderPart)
                completionProposal = createCompletionProposal(content.name, content.name, getImage(content), context)
            acceptor.accept(completionProposal)
        }
    }

    override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
        ICompletionProposalAcceptor acceptor) {

        if (keyword != null && keyword.value != null && keyword.value.equals("link")) {

            val system = contentAssistContext.currentModel;

            var int count = 0

            for (content : system.eContents) {
                if (content instanceof Component || content instanceof Connector) {
                    count = count + 1
                }

                if (count >= 2) {
                    super.completeKeyword(keyword, contentAssistContext, acceptor)
                    return;
                }
            }

        } else {
            super.completeKeyword(keyword, contentAssistContext, acceptor)
        }
    }

//    def completeLinkConsumeriiiii_Consumeriiii(LinkConsumersImpl linkConsumer, Assignment assignment,
//        ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//       if (linkConsumer.left instanceof LinkConsumerImpl)
//            addLinkConsumerProposals(linkConsumer.left as LinkConsumerImpl, context, acceptor)
//        else if (linkConsumer.left instanceof LinkConsumersImpl) {
//
//            var left = linkConsumer.left as  LinkConsumersImpl;
//
//            var lastnode = left.right;
//
//            if (lastnode instanceof LinkConsumerImpl)
//                addLinkConsumerProposals(lastnode, context, acceptor)
//
//        }
//    }
//    def addLinkConsumerProposals(LinkConsumerImpl lastLinkConsumer, ContentAssistContext context,
//        ICompletionProposalAcceptor acceptor) {
//        var ICompletionProposal completionProposal = null
//        if (lastLinkConsumer != null && lastLinkConsumer.consumer != null) {
//
//            var consumer = lastLinkConsumer.consumer as EObject;
//            for (content : consumer.eContents) {
//                if (content instanceof LinkConsumerPart)
//                    if (content instanceof Layer)
//                        completionProposal = createCompletionProposal(content.name, context)
//                    else if (content instanceof Component)
//                        completionProposal = createCompletionProposal(content.name, context)
//                    else if (content instanceof Connector)
//                        completionProposal = createCompletionProposal(content.name, context)
//                    else if (content instanceof Requires)
//                        completionProposal = createCompletionProposal(content.type, context)
//
//                acceptor.accept(completionProposal)
//            }
//
//            }
//    }
}
