/*
* generated by Xtext
*/
package uk.ac.standrews.graspide.grasp.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import uk.ac.standrews.graspide.grasp.graspDSL.Annotation
import uk.ac.standrews.graspide.grasp.graspDSL.Architecture
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody
import uk.ac.standrews.graspide.grasp.graspDSL.ArgumentList
import uk.ac.standrews.graspide.grasp.graspDSL.BecauseClause
import uk.ac.standrews.graspide.grasp.graspDSL.Check
import uk.ac.standrews.graspide.grasp.graspDSL.Component
import uk.ac.standrews.graspide.grasp.graspDSL.Connector
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationEnd
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationStart
import uk.ac.standrews.graspide.grasp.graspDSL.Layer
import uk.ac.standrews.graspide.grasp.graspDSL.Link
import uk.ac.standrews.graspide.grasp.graspDSL.Property
import uk.ac.standrews.graspide.grasp.graspDSL.Provides
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale
import uk.ac.standrews.graspide.grasp.graspDSL.Reason
import uk.ac.standrews.graspide.grasp.graspDSL.Requirement
import uk.ac.standrews.graspide.grasp.graspDSL.Requires
import uk.ac.standrews.graspide.grasp.graspDSL.System
import uk.ac.standrews.graspide.grasp.graspDSL.Template

/**
 * Provides labels for a EObjects.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class GraspDSLLabelProvider extends DefaultEObjectLabelProvider {

    @Inject
    new(AdapterFactoryLabelProvider delegate) {
        super(delegate);
    }

    // Labels and icons can be computed like this:
    def text(DeclarationStart node) {
        'Declarations'
    }

    def text(DeclarationEnd node) {
        'Declarations'
    }

    def text(ArchitectureBody node) {
        'ArchitectureBody'
    }

    def text(Reason node) {
        'Reason' + if (node != null && node.expression != null)
            ''
        else if (node.supportsClause != null && node.supportsClause.value != null && node.supportsClause.value.size > 0 &&
            node.supportsClause.value.get(0) != null) {
            var reqorQuality = node.supportsClause.value.get(0);

            if (reqorQuality != null && reqorQuality.name != null)
                ' : supports ' + reqorQuality.name
            else
                ''
        } else
            ''

    }

    def text(Check node) {
        'Check'

    //        + if (node != null && node.expression != null)
    //            ' : ' + node.expression.left.text
    //        else
    //            ''
    }

    def text(Annotation node) {

        var StringBuilder annotationBuilder = new StringBuilder();
        annotationBuilder.append('Annotation');
        if (node != null && node.annotation != null)
            annotationBuilder.append(' : ' + node.annotation);
        if (hastAtleastOneAnnotationMember(node)) {

            var String otherMembers = ' - ' + node.value.getMembers().get(0).namePair
            for (member : node.value.members.drop(1)) {
                if (member.namePair != null)
                    otherMembers = otherMembers + ', ' + member.namePair
            }
            annotationBuilder.append(otherMembers);

        }
        return annotationBuilder.toString();
    }

    def hastAtleastOneAnnotationMember(Annotation node) {
        node.value != null && node.value.members != null && node.value.members.size > 0 &&
            node.value.getMembers.get(0).namePair != null
    }

    def text(Link node) {
        'Link' + getNodeText(node)

    }

    def getNodeText(Link node) {
        var String nodeText = '';
        if (node != null && node.type != null)
            nodeText = ' : ' + node.type
        if (node.linkConsumer != null) {

            var consumer = node.linkConsumer.consumer;

            if (consumer instanceof Layer) {
                if (consumer.name != null) {
                    nodeText = nodeText + ' : ' + consumer.name
                }
            } else if (consumer instanceof Component) {
                if (consumer.name != null) {
                    nodeText = nodeText + ' : ' + consumer.name
                }
            } else if (consumer instanceof Connector) {
                if (consumer.name != null) {
                    nodeText = nodeText + ' : ' + consumer.name
                }
            } else if (consumer instanceof Requires) {
                if (consumer.type != null) {
                    nodeText = nodeText + ' : ' + consumer.type
                }
            }
        }

        if (hastAtleastOneProvider(node)) {

            var String providers = ' to ' + node.linkProviders.providers.get(0).provider.name

            for (content : node.linkProviders.providers.drop(1)) {

                if (content.provider != null && content.provider.name != null)
                    providers = providers + ', ' + content.provider.name

            }

            nodeText = nodeText + providers

        }
        return nodeText;
    }

    def hastAtleastOneProvider(Link node) {
        node.linkProviders != null && node.linkProviders.providers != null && node.linkProviders.providers.size > 0 &&
            node.linkProviders.providers.get(0) != null && node.linkProviders.providers.get(0).provider != null &&
            node.linkProviders.providers.get(0).provider.name != null
    }

    def text(Architecture node) {
        'Architecture' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Requirement node) {
        'Requirement' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Qattribute node) {
        'Quality Attribute' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Rationale node) {
        'Rationale' + if (node != null && null != node.name)
            ' : ' + node.name
        else
            ''
    }

    def text(Template node) {
        'Template' + if (node != null && null != node.name)
            ' : ' + node.name
        else
            ''
    }

    def text(Provides node) {
        'Provides' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Requires node) {
        'Requires' + if (node != null && node.type != null)
            ' : ' + node.type
        else
            ''
    }

    def text(System node) {
        'System' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Layer node) {
        'Layer' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Component node) {
        'Component' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Connector node) {
        'Connector' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(Property node) {
        'Property' + if (node != null && node.name != null)
            ' : ' + node.name
        else
            ''
    }

    def text(ArgumentList node) {
        'Arguments'
    }

    def text(BecauseClause node) {
        'Rationale' + if (hasAtleastOneBecauseMember(node)) {
            var String otherMembers = ' : ' + node.getMembers().get(0).value.name
            for (member : node.members.drop(1)) {
                if (member.value != null && member.value.name != null)
                    otherMembers = otherMembers + ', ' + member.value.name
            }
            otherMembers

        } else
            ''
    }

    def hasAtleastOneBecauseMember(BecauseClause node) {
        node != null && node.members != null && node.members.size > 0 && node.getMembers().get(0).value != null &&
            node.getMembers().get(0).value.name != null
    }

//	def image(Greeting node) {
//		'Greeting.gif'
//	}
}
