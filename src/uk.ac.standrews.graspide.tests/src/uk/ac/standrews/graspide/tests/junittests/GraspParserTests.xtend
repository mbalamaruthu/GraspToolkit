package uk.ac.standrews.graspide.tests.junittests

import com.google.inject.Inject
import org.eclipse.xtext.diagnostics.Severity
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith
import uk.ac.standrews.graspide.grasp.GraspDSLInjectorProvider
import uk.ac.standrews.graspide.grasp.graspDSL.Annotation
import uk.ac.standrews.graspide.grasp.graspDSL.Component
import uk.ac.standrews.graspide.grasp.graspDSL.Connector
import uk.ac.standrews.graspide.grasp.graspDSL.GraspSpecification
import uk.ac.standrews.graspide.grasp.graspDSL.Layer
import uk.ac.standrews.graspide.grasp.graspDSL.Link
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale
import uk.ac.standrews.graspide.grasp.graspDSL.Reason
import uk.ac.standrews.graspide.grasp.graspDSL.Requirement
import uk.ac.standrews.graspide.grasp.graspDSL.Template

import static org.junit.Assert.*

/**
 * Validate the working of the parser generated by Xtext
 */

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(GraspDSLInjectorProvider))
class GraspParserTests {

	@Inject extension ParseHelper<GraspSpecification>
	@Inject extension ValidationTestHelper

	@Test
	def void testBaseArchitecture() {
		val grasp = '''
architecture testArchitecture
{
    system testSystem {
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture
		assertEquals("testArchitecture", architecture.name)
		val system = architecture.architecutrebody.system
		assertEquals("testSystem", system.name)
	}

	@Test
	def void testInvalidBaseArchitecture() {
		val grasp = '''
architecture testArchitecture
{

}
'''.parse

		var issues = grasp.validate
		assertTrue(issues.size == 1)
		val issue = issues.get(0)

		val message = issue.message
		assertTrue((message).contains("mismatched input '}' expecting 'system'"))

		assertEquals(issue.severity, Severity.ERROR)
	}

	@Test
	def void testArchitectureWithTemplates() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}
    system testSystem {

    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val declaration = architecture.architecutrebody.declarationStart.declaration.get(0)

		assertTrue(declaration instanceof Template)

		val template = declaration as Template;

		assertEquals(template.name, "testTemplate")
	}

	@Test
	def void testArchitectureWithComponent() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}
    system testSystem {
    	component testComponent = testTemplate();
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody
		val template = architecturebody.declarationStart.declaration.get(0) as Template

		val systemConstituent = architecturebody.system.systemConstituent.get(0)

		assertTrue(systemConstituent instanceof Component)

		val component = systemConstituent as Component;

		assertEquals(component.name, "testComponent")

		assertEquals(component.value, template)

	}

	@Test
	def void testArchitectureWithConnector() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}
    system testSystem {
    	connector testConnector = testTemplate();
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody
		val template = architecturebody.declarationStart.declaration.get(0) as Template

		val systemConstituent = architecturebody.system.systemConstituent.get(0)

		assertTrue(systemConstituent instanceof Connector)

		val connector = systemConstituent as Connector;

		assertEquals(connector.name, "testConnector")

		assertEquals(connector.value, template)
	}

@Test
	def void testArchitectureWithRationale() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}
	rationale testRationale() {
		reason "TestRationale Reason";
	}
    system testSystem {
    	connector testConnector = testTemplate() because testRationale();
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody
		val declaration = architecturebody.declarationStart.declaration.get(1)

		assertTrue(declaration instanceof Rationale)

		val rationale = declaration as Rationale

		assertEquals(rationale.name, "testRationale")

		val connector = architecturebody.system.systemConstituent.get(0) as Connector

		val becauseClause = connector.becauseClause.members.get(0)
		assertEquals(becauseClause.value,rationale)

	}

@Test
	def void testArchitectureWithQualityAttribute() {
		val grasp = '''
architecture testArchitecture
{
	quality_attribute testQualityAttribute;

	rationale testRationale() {
		reason supports testQualityAttribute;
	}

	template testTemplate() {
	}

    system testSystem {
    	connector testConnector = testTemplate() because testRationale();
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody
		val declaration = architecturebody.declarationStart.declaration.get(0)

		assertTrue(declaration instanceof Qattribute)

		val qualityAttribute = declaration as Qattribute

		assertEquals(qualityAttribute.name, "testQualityAttribute")

		val rationale = architecturebody.declarationStart.declaration.get(1)
		val reason = rationale.eContents.get(0) as Reason

		val reasonQattribute = reason.supportsClause.value.get(0)

		assertEquals(reasonQattribute,qualityAttribute)

	}

	@Test
	def void testArchitectureWithRequirement() {
		val grasp = '''
architecture testArchitecture
{
	requirement testRequirement;

	rationale testRationale() {
		reason supports testRequirement;
	}

	template testTemplate() {
	}

    system testSystem {
    	connector testConnector = testTemplate() because testRationale();
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody
		val declaration = architecturebody.declarationStart.declaration.get(0)

		assertTrue(declaration instanceof Requirement)

		val requirement = declaration as Requirement

		assertEquals(requirement.name, "testRequirement")

		val rationale = architecturebody.declarationStart.declaration.get(1)
		val reason = rationale.eContents.get(0) as Reason

		val reasonRequirement = reason.supportsClause.value.get(0)

		assertEquals(reasonRequirement,requirement)
	}


		@Test
	def void testArchitectureWithLayer() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}

    system testSystem {

    	layer testLayer1 {
    		component testComponent = testTemplate();
    	}

    	layer testLayer2 over testLayer1{
    		component testComponent = testTemplate();
    	}
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody

		val layer1 = architecturebody.system.systemConstituent.get(0)
		val layer2 = architecturebody.system.systemConstituent.get(1)

		assertTrue(layer1 instanceof Layer)
		assertTrue(layer2 instanceof Layer)

		val testLayer1 = layer1 as Layer;
		val testLayer2 = layer2 as Layer;

		assertEquals(testLayer1.name, "testLayer1")
		assertEquals(testLayer2.name, "testLayer2")
	}


			@Test
	def void testArchitectureWithLinkBetweenLayers() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}

    system testSystem {

    	layer testLayer1 {
    		component testComponent = testTemplate();
    	}

    	layer testLayer2 over testLayer1{
    		component testComponent = testTemplate();
    	}

    	link testLayer1.testComponent.out to testLayer2.testComponent.in;
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody

		val link = architecturebody.system.systemConstituent.get(2)

		assertTrue(link instanceof Link)

	}


@Test
	def void testArchitectureWithLinkBetweenComponents() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}

    system testSystem {

   		component testComponent1 = testTemplate();

   		component testComponent2 = testTemplate();

    	link testComponent1.out to testComponent2.in;
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody

		val link = architecturebody.system.systemConstituent.get(2)

		assertTrue(link instanceof Link)
	}

@Test
	def void testArchitectureWithLinkBetweenConnectors() {
		val grasp = '''
architecture testArchitecture
{
	template testTemplate() {
	}

    system testSystem {

   		connector testConnector1 = testTemplate();

   		connector testConnector2 = testTemplate();

    	link testConnector1.out to testConnector2.in;
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val architecturebody = architecture.architecutrebody

		val link = architecturebody.system.systemConstituent.get(2)

		assertTrue(link instanceof Link)
	}

@Test
	def void testArchitectureWithAnnotations() {
		val grasp = '''
@testAnnotation(desc="testArchitecture")
@testAnnotation(support="testSupport")
architecture testArchitecture
{
	@testAnnotation(desc="testTemplate")
	template testTemplate() {
	}
	@testAnnotation(desc="testSystem")
    system testSystem {

   	@testAnnotation(desc="testConnector1")
   	connector testConnector1 = testTemplate();

	@testAnnotation(desc="testConnector2")
   	connector testConnector2 = testTemplate();

	@testAnnotation(desc="testLink")
    link testConnector1.out to testConnector2.in;
    }
}
'''.parse

		grasp.assertNoErrors

		val architecture = grasp.architecture

		val annotation = architecture.annotation.get(0)

		assertTrue(annotation instanceof Annotation)

		assertTrue(annotation.annotation.equals("testAnnotation"))

		val namePair = annotation.value.members.get(0).namePair
		assertEquals(namePair,"desc");
	}


}
