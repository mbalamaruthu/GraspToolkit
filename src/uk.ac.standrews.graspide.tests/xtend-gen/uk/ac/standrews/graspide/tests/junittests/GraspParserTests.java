package uk.ac.standrews.graspide.tests.junittests;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.diagnostics.Severity;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.ac.standrews.graspide.grasp.GraspDSLInjectorProvider;
import uk.ac.standrews.graspide.grasp.graspDSL.Annotation;
import uk.ac.standrews.graspide.grasp.graspDSL.Architecture;
import uk.ac.standrews.graspide.grasp.graspDSL.ArchitectureBody;
import uk.ac.standrews.graspide.grasp.graspDSL.BecauseCausalcontext;
import uk.ac.standrews.graspide.grasp.graspDSL.BecauseClause;
import uk.ac.standrews.graspide.grasp.graspDSL.Component;
import uk.ac.standrews.graspide.grasp.graspDSL.Connector;
import uk.ac.standrews.graspide.grasp.graspDSL.Declaration;
import uk.ac.standrews.graspide.grasp.graspDSL.DeclarationStart;
import uk.ac.standrews.graspide.grasp.graspDSL.GraspSpecification;
import uk.ac.standrews.graspide.grasp.graspDSL.Layer;
import uk.ac.standrews.graspide.grasp.graspDSL.Link;
import uk.ac.standrews.graspide.grasp.graspDSL.NameValue;
import uk.ac.standrews.graspide.grasp.graspDSL.NameValues;
import uk.ac.standrews.graspide.grasp.graspDSL.Qattribute;
import uk.ac.standrews.graspide.grasp.graspDSL.Rationale;
import uk.ac.standrews.graspide.grasp.graspDSL.Reason;
import uk.ac.standrews.graspide.grasp.graspDSL.Requirement;
import uk.ac.standrews.graspide.grasp.graspDSL.RequirementOrQuality;
import uk.ac.standrews.graspide.grasp.graspDSL.SupportsClause;
import uk.ac.standrews.graspide.grasp.graspDSL.SystemConstituent;
import uk.ac.standrews.graspide.grasp.graspDSL.Template;

/**
 * Validate the working of the parser generated by Xtext
 */
@RunWith(XtextRunner.class)
@InjectWith(GraspDSLInjectorProvider.class)
@SuppressWarnings("all")
public class GraspParserTests {
  @Inject
  @Extension
  private ParseHelper<GraspSpecification> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void testBaseArchitecture() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      String _name = architecture.getName();
      Assert.assertEquals("testArchitecture", _name);
      ArchitectureBody _architecutrebody = architecture.getArchitecutrebody();
      final uk.ac.standrews.graspide.grasp.graspDSL.System system = _architecutrebody.getSystem();
      String _name_1 = system.getName();
      Assert.assertEquals("testSystem", _name_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testInvalidBaseArchitecture() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      List<Issue> issues = this._validationTestHelper.validate(grasp);
      int _size = issues.size();
      boolean _equals = (_size == 1);
      Assert.assertTrue(_equals);
      final Issue issue = issues.get(0);
      final String message = issue.getMessage();
      boolean _contains = message.contains("mismatched input \'}\' expecting \'system\'");
      Assert.assertTrue(_contains);
      Severity _severity = issue.getSeverity();
      Assert.assertEquals(_severity, Severity.ERROR);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithTemplates() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      ArchitectureBody _architecutrebody = architecture.getArchitecutrebody();
      DeclarationStart _declarationStart = _architecutrebody.getDeclarationStart();
      EList<Declaration> _declaration = _declarationStart.getDeclaration();
      final Declaration declaration = _declaration.get(0);
      Assert.assertTrue((declaration instanceof Template));
      final Template template = ((Template) declaration);
      String _name = template.getName();
      Assert.assertEquals(_name, "testTemplate");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithComponent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("component testComponent = testTemplate();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      DeclarationStart _declarationStart = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration = _declarationStart.getDeclaration();
      Declaration _get = _declaration.get(0);
      final Template template = ((Template) _get);
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      final SystemConstituent systemConstituent = _systemConstituent.get(0);
      Assert.assertTrue((systemConstituent instanceof Component));
      final Component component = ((Component) systemConstituent);
      String _name = component.getName();
      Assert.assertEquals(_name, "testComponent");
      Template _value = component.getValue();
      Assert.assertEquals(_value, template);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithConnector() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("connector testConnector = testTemplate();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      DeclarationStart _declarationStart = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration = _declarationStart.getDeclaration();
      Declaration _get = _declaration.get(0);
      final Template template = ((Template) _get);
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      final SystemConstituent systemConstituent = _systemConstituent.get(0);
      Assert.assertTrue((systemConstituent instanceof Connector));
      final Connector connector = ((Connector) systemConstituent);
      String _name = connector.getName();
      Assert.assertEquals(_name, "testConnector");
      Template _value = connector.getValue();
      Assert.assertEquals(_value, template);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithRationale() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("rationale testRationale() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("reason \"TestRationale Reason\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("connector testConnector = testTemplate() because testRationale();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      DeclarationStart _declarationStart = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration = _declarationStart.getDeclaration();
      final Declaration declaration = _declaration.get(1);
      Assert.assertTrue((declaration instanceof Rationale));
      final Rationale rationale = ((Rationale) declaration);
      String _name = rationale.getName();
      Assert.assertEquals(_name, "testRationale");
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      SystemConstituent _get = _systemConstituent.get(0);
      final Connector connector = ((Connector) _get);
      BecauseClause _becauseClause = connector.getBecauseClause();
      EList<BecauseCausalcontext> _members = _becauseClause.getMembers();
      final BecauseCausalcontext becauseClause = _members.get(0);
      Rationale _value = becauseClause.getValue();
      Assert.assertEquals(_value, rationale);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithQualityAttribute() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("quality_attribute testQualityAttribute;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("rationale testRationale() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("reason supports testQualityAttribute;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("connector testConnector = testTemplate() because testRationale();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      DeclarationStart _declarationStart = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration = _declarationStart.getDeclaration();
      final Declaration declaration = _declaration.get(0);
      Assert.assertTrue((declaration instanceof Qattribute));
      final Qattribute qualityAttribute = ((Qattribute) declaration);
      String _name = qualityAttribute.getName();
      Assert.assertEquals(_name, "testQualityAttribute");
      DeclarationStart _declarationStart_1 = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration_1 = _declarationStart_1.getDeclaration();
      final Declaration rationale = _declaration_1.get(1);
      EList<EObject> _eContents = rationale.eContents();
      EObject _get = _eContents.get(0);
      final Reason reason = ((Reason) _get);
      SupportsClause _supportsClause = reason.getSupportsClause();
      EList<RequirementOrQuality> _value = _supportsClause.getValue();
      final RequirementOrQuality reasonQattribute = _value.get(0);
      Assert.assertEquals(reasonQattribute, qualityAttribute);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithRequirement() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("requirement testRequirement;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("rationale testRationale() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("reason supports testRequirement;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("connector testConnector = testTemplate() because testRationale();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      DeclarationStart _declarationStart = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration = _declarationStart.getDeclaration();
      final Declaration declaration = _declaration.get(0);
      Assert.assertTrue((declaration instanceof Requirement));
      final Requirement requirement = ((Requirement) declaration);
      String _name = requirement.getName();
      Assert.assertEquals(_name, "testRequirement");
      DeclarationStart _declarationStart_1 = architecturebody.getDeclarationStart();
      EList<Declaration> _declaration_1 = _declarationStart_1.getDeclaration();
      final Declaration rationale = _declaration_1.get(1);
      EList<EObject> _eContents = rationale.eContents();
      EObject _get = _eContents.get(0);
      final Reason reason = ((Reason) _get);
      SupportsClause _supportsClause = reason.getSupportsClause();
      EList<RequirementOrQuality> _value = _supportsClause.getValue();
      final RequirementOrQuality reasonRequirement = _value.get(0);
      Assert.assertEquals(reasonRequirement, requirement);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithLayer() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("layer testLayer1 {");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("component testComponent = testTemplate();");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("layer testLayer2 over testLayer1{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("component testComponent = testTemplate();");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      final SystemConstituent layer1 = _systemConstituent.get(0);
      uk.ac.standrews.graspide.grasp.graspDSL.System _system_1 = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent_1 = _system_1.getSystemConstituent();
      final SystemConstituent layer2 = _systemConstituent_1.get(1);
      Assert.assertTrue((layer1 instanceof Layer));
      Assert.assertTrue((layer2 instanceof Layer));
      final Layer testLayer1 = ((Layer) layer1);
      final Layer testLayer2 = ((Layer) layer2);
      String _name = testLayer1.getName();
      Assert.assertEquals(_name, "testLayer1");
      String _name_1 = testLayer2.getName();
      Assert.assertEquals(_name_1, "testLayer2");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithLinkBetweenLayers() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("layer testLayer1 {");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("component testComponent = testTemplate();");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("layer testLayer2 over testLayer1{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("component testComponent = testTemplate();");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("link testLayer1.testComponent.out to testLayer2.testComponent.in;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      final SystemConstituent link = _systemConstituent.get(2);
      Assert.assertTrue((link instanceof Link));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithLinkBetweenComponents() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("   \t\t");
      _builder.append("component testComponent1 = testTemplate();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("   \t\t");
      _builder.append("component testComponent2 = testTemplate();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("link testComponent1.out to testComponent2.in;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      final SystemConstituent link = _systemConstituent.get(2);
      Assert.assertTrue((link instanceof Link));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithLinkBetweenConnectors() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("   \t\t");
      _builder.append("connector testConnector1 = testTemplate();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("   \t\t");
      _builder.append("connector testConnector2 = testTemplate();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("link testConnector1.out to testConnector2.in;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      final ArchitectureBody architecturebody = architecture.getArchitecutrebody();
      uk.ac.standrews.graspide.grasp.graspDSL.System _system = architecturebody.getSystem();
      EList<SystemConstituent> _systemConstituent = _system.getSystemConstituent();
      final SystemConstituent link = _systemConstituent.get(2);
      Assert.assertTrue((link instanceof Link));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testArchitectureWithAnnotations() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("@testAnnotation(desc=\"testArchitecture\")");
      _builder.newLine();
      _builder.append("@testAnnotation(support=\"testSupport\")");
      _builder.newLine();
      _builder.append("architecture testArchitecture");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@testAnnotation(desc=\"testTemplate\")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("template testTemplate() {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@testAnnotation(desc=\"testSystem\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testSystem {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("   \t");
      _builder.append("@testAnnotation(desc=\"testConnector1\")");
      _builder.newLine();
      _builder.append("   \t");
      _builder.append("connector testConnector1 = testTemplate();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@testAnnotation(desc=\"testConnector2\")");
      _builder.newLine();
      _builder.append("   \t");
      _builder.append("connector testConnector2 = testTemplate();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@testAnnotation(desc=\"testLink\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("link testConnector1.out to testConnector2.in;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
      final Architecture architecture = grasp.getArchitecture();
      EList<Annotation> _annotation = architecture.getAnnotation();
      final Annotation annotation = _annotation.get(0);
      Assert.assertTrue((annotation instanceof Annotation));
      String _annotation_1 = annotation.getAnnotation();
      boolean _equals = _annotation_1.equals("testAnnotation");
      Assert.assertTrue(_equals);
      NameValues _value = annotation.getValue();
      EList<NameValue> _members = _value.getMembers();
      NameValue _get = _members.get(0);
      final String namePair = _get.getNamePair();
      Assert.assertEquals(namePair, "desc");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
