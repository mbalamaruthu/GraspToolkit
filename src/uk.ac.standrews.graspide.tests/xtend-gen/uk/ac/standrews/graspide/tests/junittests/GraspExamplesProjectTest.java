package uk.ac.standrews.graspide.tests.junittests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.ac.standrews.graspide.grasp.GraspDSLInjectorProvider;
import uk.ac.standrews.graspide.grasp.graspDSL.GraspSpecification;

/**
 * Checks for parsing errors in the example Grasp specifications
 */
@RunWith(XtextRunner.class)
@InjectWith(GraspDSLInjectorProvider.class)
@SuppressWarnings("all")
public class GraspExamplesProjectTest {
  @Inject
  @Extension
  private ParseHelper<GraspSpecification> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void testBankingTransactionsArchitecture() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("//");
      _builder.newLine();
      _builder.append("// A simple Grasp architecture specification of a Banking Transactions");
      _builder.newLine();
      _builder.append("//");
      _builder.newLine();
      _builder.append("architecture Example");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Requirements and quality attribute specifiers");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("requirement Rq_AckProcessing;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("quality_attribute MultiConnections = true;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("quality_attribute MaxVolumePerBank = 50;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("quality_attribute MinTrxPerDay = 8000;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("quality_attribute NoLostPayments = true;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("quality_attribute NoDuplicates = true;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("quality_attribute TimeOut = true;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Rationale descriptors");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@(desc=\"OptimalMsgProcPerformance\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale AR10() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason supports MultiConnections, MaxVolumePerBank, MinTrxPerDay;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@(desc=\"ProcessingSequence\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale AR13(M) {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason supports Rq_AckProcessing;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@(desc=\"NoLossTransaction\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale AR14(M) {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason supports NoLostPayments, NoDuplicates;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@(desc=\"TimeOutMechanism\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale AR15(M) {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason supports TimeOut;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Templates");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template AsyncComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("property asyncMarker = \"Async\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template AlarmService() {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Runtime structure");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system PaymentGateway {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("component msgProc = AsyncComponent() because AR10();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("component mcpDriver = AsyncComponent() because AR13(msgProc);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("component errDetect = AsyncComponent() because AR14(msgProc);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("component errRecover = AsyncComponent() because AR14(msgProc);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("component alarm = AlarmService() because AR15(errDetect);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRESTArchitecture() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      _builder.append("//");
      _builder.newLine();
      _builder.append("// A simple Grasp architecture specification of a REST Style");
      _builder.newLine();
      _builder.append("//");
      _builder.newLine();
      _builder.append("architecture testConstructs");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("quality_attribute supportMultipleClients;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R1()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Use REST Style\';");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R2()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Use Layered Style\';");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R3()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("reason #\'Configurable Server and Database\';");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("reason #\'Low Coupling between Server and Database\';");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R4()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Singleton Pattern\';");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason supports supportMultipleClients;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ConfigurationComponent(){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IConfiguration;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ViewComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IView;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IServerConnector;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ServerConnector() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IServerConnector;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IServerURIs;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template RestServerComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IServerURIs;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ServerComponent() extends RestServerComponent {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IConfiguration;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IDatabase;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("//check IDatabase->maxInstances = 1;");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("     ");
      _builder.append("template StorageComponent()  {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IConfiguration;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IDatabase;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("property maxInstances = 1 because R4();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system testConstructsSystem");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("layer Database because R2()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("component databaseConfiguration = ConfigurationComponent()  because R3();");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("component storageComponent = StorageComponent() because R3();");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("link storageComponent.IConfiguration to databaseConfiguration.IConfiguration;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("layer Server over Database because R2()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component serverComponent = ServerComponent() because R3(), R1();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component serverConfiguration = ConfigurationComponent()  because R3();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link serverComponent.IConfiguration to serverConfiguration.IConfiguration;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("layer Client over Server because R2()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("component viewComponent = ViewComponent() because R1();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("         ");
      _builder.append("connector serverConnector = ServerConnector() because R1();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("         ");
      _builder.append("link viewComponent.IServerConnector to serverConnector.IServerConnector;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("link Server.serverComponent.IDatabase to Database.storageComponent.IDatabase;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("link Client.serverConnector.IServerURIs to Server.serverComponent.IServerURIs;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testWsnSimulatorArchitecture() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      _builder.append("//");
      _builder.newLine();
      _builder.append("// A simple Grasp architecture specification of a WSN simulator");
      _builder.newLine();
      _builder.append("//");
      _builder.newLine();
      _builder.append("architecture WsnSimulator");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Rationale descriptors");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R1() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Use layered architecture style\';");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Achieve clear seperation of concerns\';");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R2() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Use MVC design pattern\';");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rationale R3() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reason #\'Simulator engine must perform event logging\';");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Templates");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ViewComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IView;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IModel;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ControllerComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IView;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires IModel;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template ModelComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides IModel;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires ISequencer;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires INetwork;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template SensorNetworkComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides INetwork;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires ISequencer;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires ILogger;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template SequencerComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides ISequencer;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("requires ILogger;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("template LoggerComponent() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("provides ILogger;");
      _builder.newLine();
      _builder.append("//      check isConnected();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Runtime static model");
      _builder.newLine();
      _builder.append("//  @Visualiser(Canvas = [1000,1000])");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("system StaticModel");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("layer UtilityLayer because R1()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component logger = LoggerComponent();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("layer SimulatorLayer over UtilityLayer because R1()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component network = SensorNetworkComponent();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component sequencer = SequencerComponent();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link network.ISequencer to sequencer.ISequencer;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("layer PresentationLayer over SimulatorLayer, UtilityLayer because R1()");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component model = ModelComponent() because R2();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component controller = ControllerComponent() because R2();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component textView = ViewComponent() because R2();");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("component graphicView = ViewComponent() because R2();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link controller.IModel to model.IModel;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link textView.IModel to model.IModel;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link graphicView.IModel to model.IModel;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link controller.IView to textView.IView;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("link controller.IView to graphicView.IView;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("link PresentationLayer.model.INetwork to SimulatorLayer.network.INetwork;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("link PresentationLayer.model.ISequencer to SimulatorLayer.sequencer.ISequencer;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("link SimulatorLayer.network.ILogger to UtilityLayer.logger.ILogger because R3();");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("link SimulatorLayer.sequencer.ILogger to UtilityLayer.logger.ILogger because R3();");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final GraspSpecification grasp = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(grasp);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
